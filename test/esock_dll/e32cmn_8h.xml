<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxFile PUBLIC "-//NOKIA//DTD DITA C++ API File Reference Type v0.5.0//EN" "dtd/cxxFile.dtd" >
<cxxFile id="e32cmn_8h">
	<apiName>e32cmn.h</apiName>
	<cxxTypedef id="e32cmn_8h_1a7ca0e7fb5561af67434cd24ea92fa4d8">
		<apiName>TDesC</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_des_c16.xml#class_t_des_c16">TDesC16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TDesC16 TDesC</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TDesC</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1139"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a build-independent non-modifiable descriptor.</p>
				<p>A 16-bit build variant is generated for a Unicode, non-kernel mode build.</p>
				<p>A build-independent type should always be used unless an explicit 8-bit or 16-bit type is required.</p>
				<p>
					<xref href="class_t_des_c8.xml#class_t_des_c8">TDesC8</xref> </p>
				<p>
					<xref href="class_t_des_c16.xml#class_t_des_c16">TDesC16</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a41820caac5e7da3ebae012b4515f983d">
		<apiName>TPtrC</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_ptr_c16.xml#class_t_ptr_c16">TPtrC16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TPtrC16 TPtrC</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TPtrC</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1159"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a build-independent non-modifiable pointer descriptor.</p>
				<p>A 16-bit build variant is generated for a Unicode, non-kernel mode build.</p>
				<p>A build-independent type should always be used unless an explicit 8-bit or 16-bit type is required.</p>
				<p>
					<xref href="class_t_ptr_c8.xml#class_t_ptr_c8">TPtrC8</xref> </p>
				<p>
					<xref href="class_t_ptr_c16.xml#class_t_ptr_c16">TPtrC16</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a202e8b5f6472069ccf687335fd049ebb">
		<apiName>TDes</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_des16.xml#class_t_des16">TDes16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TDes16 TDes</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TDes</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1179"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a build-independent modifiable descriptor.</p>
				<p>A 16-bit build variant is generated for a Unicode, non-kernel mode build.</p>
				<p>A build-independent type should always be used unless an explicit 8-bit or 16-bit type is required.</p>
				<p>
					<xref href="class_t_des8.xml#class_t_des8">TDes8</xref> </p>
				<p>
					<xref href="class_t_des16.xml#class_t_des16">TDes16</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a46d978c5222798d592179042bb097261">
		<apiName>TPtr</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_ptr16.xml#class_t_ptr16">TPtr16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TPtr16 TPtr</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TPtr</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1199"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a build-independent modifiable pointer descriptor.</p>
				<p>A 16-bit build variant is generated for a Unicode, non-kernel mode build.</p>
				<p>A build-independent type should always be used unless an explicit 8-bit or 16-bit type is required.</p>
				<p>
					<xref href="class_t_ptr8.xml#class_t_ptr8">TPtr8</xref> </p>
				<p>
					<xref href="class_t_ptr16.xml#class_t_ptr16">TPtr16</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a84c501db7c0dc21500f9f3ad01782fe9">
		<apiName>HBufC</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_h_buf_c16.xml#class_h_buf_c16">HBufC16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>HBufC16 HBufC</cxxTypedefPrototype>
				<cxxTypedefNameLookup>HBufC</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1220"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a build-independent heap descriptor.</p>
				<p>A 16-bit build variant is generated for a Unicode, non-kernel mode build.</p>
				<p>A build-independent type should always be used unless an explicit 8-bit or 16-bit type is required.</p>
				<p>
					<xref href="class_h_buf_c8.xml#class_h_buf_c8">HBufC8</xref> </p>
				<p>
					<xref href="class_h_buf_c16.xml#class_h_buf_c16">HBufC16</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1ae60b3ebffd43aee834a3d4d62e616ac7">
		<apiName>TDesOverflow</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_des16_overflow.xml#class_t_des16_overflow">TDes16Overflow</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TDes16Overflow TDesOverflow</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TDesOverflow</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1240"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a build-independent descriptor overflow handler.</p>
				<p>A 16-bit build variant is generated for a Unicode, non-kernel mode build.</p>
				<p>A build-independent type should always be used unless an explicit 8-bit or 16-bit type is required.</p>
				<p>
					<xref href="class_t_des8_overflow.xml#class_t_des8_overflow">TDes8Overflow</xref> </p>
				<p>
					<xref href="class_t_des16_overflow.xml#class_t_des16_overflow">TDes16Overflow</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a82936a504170874996d55482405f16d8">
		<apiName>RBuf</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_r_buf16.xml#class_r_buf16">RBuf16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>RBuf16 RBuf</cxxTypedefPrototype>
				<cxxTypedefNameLookup>RBuf</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1257"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a build-independent resizable buffer descriptor.</p>
				<p>A 16-bit build variant is generated for a Unicode, non-kernel mode build.</p>
				<p>A build-independent type should always be used unless an explicit 8-bit or 16-bit type is required.</p>
				<p>
					<xref href="class_r_buf8.xml#class_r_buf8">RBuf8</xref> </p>
				<p>
					<xref href="class_r_buf16.xml#class_r_buf16">RBuf16</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1ac9b0d1abe53cc074f3eb62e6bda54587">
		<apiName>TBufCBase</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf_c_base16.xml#class_t_buf_c_base16">TBufCBase16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBufCBase16 TBufCBase</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TBufCBase</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1402"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc/>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a4ea990c88a6937d6280a437e2efb527e">
		<apiName>__TRefDesC</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_ref_by_value.xml#class_t_ref_by_value">TRefByValue</apiRelation>&lt; const <apiRelation href="class_t_des_c16.xml#class_t_des_c16">TDesC</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TRefByValue&lt; const TDesC &gt; __TRefDesC</cxxTypedefPrototype>
				<cxxTypedefNameLookup>__TRefDesC</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1521"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Value reference used in operator <xref href="e32cmn_8h.xml#e32cmn_8h_1a4ea990c88a6937d6280a437e2efb527e">TLitC::__TRefDesC()</xref>.</p>
				<p>
					<xref href="class_t_ref_by_value.xml#class_t_ref_by_value">TRefByValue</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1ad5df09f73413a888a8d7d5c944637525">
		<apiName>TName</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf.xml#class_t_buf">TBuf</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1a1624b7c3f7ce35fcaced26354c40a1fc">KMaxName</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf&lt; KMaxName &gt; TName</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TName</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1718"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a modifiable buffer descriptor that can contain the name of a reference counting object.</p>
				<p>
					<xref href="class_t_buf.xml#class_t_buf">TBuf</xref> </p>
				<p>
					<xref href="class_c_object.xml#class_c_object">CObject</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1ae9c09fa998ffd3442732e8a181057227">
		<apiName>TFullName</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf.xml#class_t_buf">TBuf</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1adb073d2426a277355636e6b9a8c05ebb">KMaxFullName</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf&lt; KMaxFullName &gt; TFullName</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TFullName</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1731"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a modifiable buffer descriptor that can contain the full name of a reference counting object.</p>
				<p>
					<xref href="class_t_buf.xml#class_t_buf">TBuf</xref> </p>
				<p>
					<xref href="class_c_object.xml#class_c_object">CObject</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a0a721e8231f4e934f180d1d7a6d30604">
		<apiName>TExitCategoryName</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf.xml#class_t_buf">TBuf</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1ac6f116b564c269c126fa1846ec4fcd9a">KMaxExitCategoryName</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf&lt; KMaxExitCategoryName &gt; TExitCategoryName</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TExitCategoryName</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1746"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a modifiable buffer descriptor to contain the category name identifying the cause of thread or process termination. The buffer takes a maximum length of KMaxExitCategoryName.</p>
				<p>
					<xref href="class_r_thread.xml#class_r_thread_1afce9f7a7a48274f13fc6e45609b05663">RThread::ExitCategory</xref> </p>
				<p>
					<xref href="class_r_thread.xml#class_r_thread_1afce9f7a7a48274f13fc6e45609b05663">RThread::ExitCategory</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a72afe68dd91b1f19845cd42da728241f">
		<apiName>TFileName</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf.xml#class_t_buf">TBuf</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1abaa62eff69a94f1ede111b6883c14133">KMaxFileName</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf&lt; KMaxFileName &gt; TFileName</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TFileName</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1760"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>A buffer that can contain the name of a file. The name can have a maximum length of KMaxFileName (currently 256 but check the definition of KMaxFileName).</p>
				<p>
					<xref href="e32const_8h.xml#e32const_8h_1abaa62eff69a94f1ede111b6883c14133">KMaxFileName</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a08f6d534f2005c3478ca128be754bcae">
		<apiName>TPath</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf.xml#class_t_buf">TBuf</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1a42f9b17e4ae1adb4830c7fc18627cd29">KMaxPath</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf&lt; KMaxPath &gt; TPath</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TPath</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1774"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>A buffer that can contain the name of a path. The name can have a maximum length of KMaxPath (currently 256 but check the definition of KMaxPath).</p>
				<p>
					<xref href="e32const_8h.xml#e32const_8h_1a42f9b17e4ae1adb4830c7fc18627cd29">KMaxPath</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a39828b0030921f0b556bdf850252d3c9">
		<apiName>TVersionName</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf.xml#class_t_buf">TBuf</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1a6920ee4d46942fbe12a6ba04e8bdcd14">KMaxVersionName</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf&lt; KMaxVersionName &gt; TVersionName</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TVersionName</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1791"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Version name type.</p>
				<p>This is a buffer descriptor with a maximum length of KMaxVersionName. A <xref href="class_t_version.xml#class_t_version">TVersion</xref> object returns the formatted character representation of its version information in a descriptor of this type.</p>
				<p>
					<xref href="class_t_version.xml#class_t_version">TVersion</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1ada25a89ffd181f91dee98830feee9be8">
		<apiName>TUidName</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf.xml#class_t_buf">TBuf</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1a10dd676ddbf8017283f56caae71d51f2">KMaxUidName</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf&lt; KMaxUidName &gt; TUidName</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TUidName</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1806"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a modifiable buffer descriptor for the text form of the UID. The descriptor has a maximum length of KMaxUidName and is used to contain the standard text format returned by the function <xref href="class_t_uid.xml#class_t_uid_1a84d8c0c2abc1bd78114e740eacf6d453">TUid::Name()</xref>.</p>
				<p>
					<xref href="class_t_uid.xml#class_t_uid_1a84d8c0c2abc1bd78114e740eacf6d453">TUid::Name</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a7a2b4486ab1d31b45691864e1e67678e">
		<apiName>__NullPMF</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>void(OnlyCreateWithNull::*</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>void(OnlyCreateWithNull::* __NullPMF)()</cxxTypedefPrototype>
				<cxxTypedefNameLookup>__NullPMF</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="3020"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc/>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1aabca85f0e9b5c7d187864756585d9f43">
		<apiName>TMediaPassword</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf8.xml#class_t_buf8">TBuf8</apiRelation>&lt; <apiRelation href="e32const_8h.xml#_1a73d2cf8340811dd03b2678b00c49022b">KMaxMediaPassword</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf8&lt; KMaxMediaPassword &gt; TMediaPassword</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TMediaPassword</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="3362"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines an 8-bit modifiable buffer descriptor to contain passwords when dealing with password security support in a file server session.</p>
				<p>The descriptor takes a maximum length of KMaxMediaPassword.</p>
				<p>
					<xref href="e32const_8h.xml#e32const_8h_1a73d2cf8340811dd03b2678b00c49022b">KMaxMediaPassword</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxVariable id="e32cmn_8h_1ae351621694e61c66dc229e0e45636caf">
		<apiName>KScFlagBufOffsetListInUse</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableDeclaredType>const <apiRelation href="e32def_8h.xml#_1acdfcd7c66db8ed1b8dfefd71c9542d42">TUint</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName/>
				<cxxVariablePrototype>const TUint KScFlagBufOffsetListInUse</cxxVariablePrototype>
				<cxxVariableNameLookup>KScFlagBufOffsetListInUse</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="3372"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>A configuration flag for the shared chunk buffer configuration class (used by the multimedia device drivers). This being set signifies that a buffer offset list follows the buffer configuration class. This list holds the offset of each buffer. </p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxVariable id="e32cmn_8h_1ad26a149538b29bc530db9f642559f0af">
		<apiName>KScFlagUseGuardPages</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableDeclaredType>const <apiRelation href="e32def_8h.xml#_1acdfcd7c66db8ed1b8dfefd71c9542d42">TUint</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName/>
				<cxxVariablePrototype>const TUint KScFlagUseGuardPages</cxxVariablePrototype>
				<cxxVariableNameLookup>KScFlagUseGuardPages</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="3380"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>A configuration flag for the shared chunk buffer configuration class (used by the multimedia device drivers). This being set is a suggestion that the shared chunk should be configured leaving guard pages around each buffers. </p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxVariable id="e32cmn_8h_1ab01fbbd4a00ad3531a7eeba83568e75c">
		<apiName>KCapabilitySetMaxSize</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableDeclaredType>const <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName/>
				<cxxVariablePrototype>const TInt KCapabilitySetMaxSize</cxxVariablePrototype>
				<cxxVariableNameLookup>KCapabilitySetMaxSize</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="3408"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>Maximum size of capability set</p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxVariable id="e32cmn_8h_1a6a091f34bab3f1ca7ca202539e30d99f">
		<apiName>KMaxSecurityPolicySize</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableDeclaredType>const <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName/>
				<cxxVariablePrototype>const TInt KMaxSecurityPolicySize</cxxVariablePrototype>
				<cxxVariableNameLookup>KMaxSecurityPolicySize</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="3414"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>Maximum size of any future extension to <xref href="class_t_security_policy.xml#class_t_security_policy">TSecurityPolicy</xref>
				</p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxTypedef id="e32cmn_8h_1a743208a9b2f878059a150d8fec782721">
		<apiName>TSecurityPolicyBuf</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_pckg_buf.xml#class_t_pckg_buf">TPckgBuf</apiRelation>&lt; <apiRelation href="class_t_security_policy.xml#class_t_security_policy">TSecurityPolicy</apiRelation> &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TPckgBuf&lt; TSecurityPolicy &gt; TSecurityPolicyBuf</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TSecurityPolicyBuf</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="3744"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Provides a TPkcgBuf wrapper for a descriptorised <xref href="class_t_security_policy.xml#class_t_security_policy">TSecurityPolicy</xref>. This a suitable container for passing a security policy across IPC.   </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a5964454e7664626e415a0f090fdc9352">
		<apiName>TMediaSerialNumber</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_buf8.xml#class_t_buf8">TBuf8</apiRelation>&lt; KMaxSerialNumLength &gt;</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBuf8&lt; KMaxSerialNumLength &gt; TMediaSerialNumber</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TMediaSerialNumber</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="4843"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc/>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a42cf117681c73c62cc5fae7ffb9525dc">
		<apiName>TModuleMemoryInfo</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_process_memory_info.xml#class_t_process_memory_info">TProcessMemoryInfo</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TProcessMemoryInfo TModuleMemoryInfo</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TModuleMemoryInfo</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="4915"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a more useful synonym for <xref href="class_t_process_memory_info.xml#class_t_process_memory_info">TProcessMemoryInfo</xref>. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a5062ea5a885ec2f798063c3ecee5dec2">
		<apiName>TGeneralIdentityRelation</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a20c972998428c427c873ed496231115c">TBool</apiRelation>(*</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TBool(* TGeneralIdentityRelation)(const TAny *, const TAny *)</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TGeneralIdentityRelation</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="5002"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a function type used by a <xref href="class_t_identity_relation.xml#class_t_identity_relation">TIdentityRelation</xref> object.</p>
				<p>A function of this type implements an algorithm for determining whether two objects match.</p>
				<p>
					<xref href="class_t_identity_relation.xml#class_t_identity_relation">TIdentityRelation</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32cmn_8h_1a2392910b2bc7c682e120b4b53db60db0">
		<apiName>TGeneralLinearOrder</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>(*</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TInt(* TGeneralLinearOrder)(const TAny *, const TAny *)</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TGeneralLinearOrder</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="5018"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a function type used by a <xref href="class_t_linear_order.xml#class_t_linear_order">TLinearOrder</xref> object</p>
				<p>A function of this type implements an algorithm that determines the order of two objects.</p>
				<p>
					<xref href="class_t_linear_order.xml#class_t_linear_order">TLinearOrder</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxFileAPIItemLocation>
		<cxxFileDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
	</cxxFileAPIItemLocation>
</cxxFile>