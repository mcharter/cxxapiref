<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_connection_serv_1_1_r_connection_serv">
	<apiName>ConnectionServ::RConnectionServ</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="66"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="62"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="172"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>Provides access to the comms management plane. </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_connection_serv_1_1_r_connection_serv_1a59628000b977d2c6450ecce24dabb583">
		<apiName>RConnectionServ</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType>IMPORT_C</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>ConnectionServ::RConnectionServ</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C RConnectionServ()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>ConnectionServ::RConnectionServ::RConnectionServ()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="74"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="45"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="52"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Empty ctor </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_connection_serv_1_1_r_connection_serv_1abeb63ff92600a24785717fbb2e19c9b1">
		<apiName>Connect</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>ConnectionServ::RConnectionServ</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C TInt Connect(TUint aTierId)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>ConnectionServ::RConnectionServ::Connect(TUint)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1acdfcd7c66db8ed1b8dfefd71c9542d42">TUint</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aTierId</cxxFunctionParameterDeclarationName>
						<apiDefNote>Id of the Tier to connect to. To use the instance the client connects to a Tier, depending on the technology they need to address. All actions are then performed in the context of that Tier until Close is called. The Tier Id may be Null which indicates all tiers. At the moment no functionality supports the Null value. </apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="85"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="55"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="118"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Opens a new RConnServer session.</p>
				<p>KErrNone if successful, otherwise another of the system wide error codes.</p>
				<p>Opens a session to the connection server.</p>
				<p>
					<xref href="class_r_handle_base.xml#class_r_handle_base_1ad79a6f0c004c694d4eecbea1696cbcc8">RHandleBase::Close()</xref> should be called once the session is no longer required. All resources which are opened using the session will be automatically closed when the session terminates.</p>
				<p>KErrNone if successful, otherwise another of the system-wide error codes. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_connection_serv_1_1_r_connection_serv_1ab6f41e68c31572cb2efa7c3f8ded8ddb">
		<apiName>Close</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>ConnectionServ::RConnectionServ</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Close()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>ConnectionServ::RConnectionServ::Close()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="91"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="121"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="136"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Ends the session and ends the association with the Tier that was specified in Connect.</p>
				<p>Closes the comms manager sub-session</p>
				<p>Delete owned object and drop to base class </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_connection_serv_1_1_r_connection_serv_1a6aedae7d1063c168a4a050a810d8aeb6">
		<apiName>AccessPointStatusQuery</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>ConnectionServ::RConnectionServ</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void AccessPointStatusQuery(const CConnectionServParameterBundle &amp;aQuery, CConnectionServParameterBundle &amp;aResult, TRequestStatus &amp;aStatus)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>ConnectionServ::RConnectionServ::AccessPointStatusQuery(const CConnectionServParameterBundle &amp;,CConnectionServParameterBundle &amp;,TRequestStatus &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_connection_serv_1_1_c_connection_serv_parameter_bundle.xml#class_connection_serv_1_1_c_connection_serv_parameter_bundle">CConnectionServParameterBundle</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aQuery</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_connection_serv_1_1_c_connection_serv_parameter_bundle.xml#class_connection_serv_1_1_c_connection_serv_parameter_bundle">CConnectionServParameterBundle</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aResult</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_request_status.xml#class_t_request_status">TRequestStatus</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aStatus</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="117"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="141"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="145"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Retrieve information from the Tier(s) specified in the Connect function about the availability of one or more services.</p>
				<p>aQuery is an in parameter. It must be created and deleted (after the request has completed!) by the caller of this method. The Parameter Bundle contains 1 Parameter Set Container (at present). The Parameter Set Container contains 1 or more query Parameter Sets to specify the Access Point or group of Access Points it wishes to retrieve information about.</p>
				<p>aResult is an out parameter. It must be created and deleted (after the request has completed!) by the caller of this method. The Connection Server populates this bundle with information about the access points that matched the query.</p>
				<p>The time taken to perform this action depends on the implementation in the Tier Manager stack plug-in that serves the tier this session is attached to. Hence it&apos;s an asynchronous request.</p>
				<p>It delegates to active objects to do its work, and hence the passed-in <xref href="class_t_request_status.xml#class_t_request_status">TRequestStatus</xref> is completed by the thread that calls this function. Therefore it is not possible to make this call act &quot;synchronously&quot; by just using WaitForRequest on the following line to the call to this function. Instead you&apos;d have to kick off a worker thread to perform this call, then use your main thread to do the waiting for the completion. This should only be a problem for test code, as all &quot;real-world&quot; apps are event based anyway so would supply an active object for this request, therefore would return control to the active scheduler which can then do what it needs to complete the request. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_connection_serv_1_1_r_connection_serv_1a9088a27de63bb639010eb19662f61522">
		<apiName>CancelAccessPointStatusQuery</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>ConnectionServ::RConnectionServ</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void CancelAccessPointStatusQuery()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>ConnectionServ::RConnectionServ::CancelAccessPointStatusQuery()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="126"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="147"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="151"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Tell the Connection Server we are cancelling our status query request. If no query is active, does nothing.</p>
				<p>This function is synchronous, in that it ensures the cancel has gone all the way through to the server before it returns. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_connection_serv_1_1_r_connection_serv_1af33c756f9e887e9fc7ace6ff1551b521">
		<apiName>AccessPointNotification</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>ConnectionServ::RConnectionServ</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void AccessPointNotification(const CConnectionServParameterBundle &amp;aQuery, MAccessPointNotificationObserver &amp;aObserver)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>ConnectionServ::RConnectionServ::AccessPointNotification(const CConnectionServParameterBundle &amp;,MAccessPointNotificationObserver &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_connection_serv_1_1_c_connection_serv_parameter_bundle.xml#class_connection_serv_1_1_c_connection_serv_parameter_bundle">CConnectionServParameterBundle</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aQuery</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_connection_serv_1_1_m_access_point_notification_observer.xml#class_connection_serv_1_1_m_access_point_notification_observer">MAccessPointNotificationObserver</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aObserver</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="157"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="153"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="157"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>As for AccessPointStatusQuery, but will notify of changes to availability of requested Access Point(s).</p>
				<p>aQuery is an in parameter. It must be created and deleted (after the request has completed!) by the caller of this method. The Parameter Bundle contains 1 Parameter Set Container (at present). The Parameter Set Container contains 1 or more query Parameter Sets to specify the Access Point or group of Access Points it wishes to retrieve information about.</p>
				<p>The aQuery defines a set of access points. As soon as this &quot;view&quot; is established on the server, an empty bundle gets reported to the observer (see second argument, aObserver) to denote that all the notifications are all registered on the server side. After that, Access Points entering or leaving the set get reported to the observer. This is at least the case for the generic tier parameters. Tiers with advanced parameters (e.g. signal strength) may define their own criteria as to when to notify (e.g. signal strength crossing some threshold by some amount) Queueing of multiple events happens automatically on the server side.</p>
				<p>aObserver refers to a client-defined implementation of the <xref href="class_connection_serv_1_1_m_access_point_notification_observer.xml#class_connection_serv_1_1_m_access_point_notification_observer">MAccessPointNotificationObserver</xref> interface - this defines an AccessPointNotification(CConnectionServParameterBundle* aResult) method (which is called on each result back from the connection server), and an AccessPointNotificationError() method which is called in case of an error.</p>
				<p>Notifications are performed by a worker active object. Therefore you must have an active scheduler to use this API, and a return of control to the active scheduler is required before any notification or error will be received via your observer. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_connection_serv_1_1_r_connection_serv_1abe63ec47d1f84e9bb7c89d3044e1f417">
		<apiName>CancelAccessPointNotification</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>ConnectionServ::RConnectionServ</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void CancelAccessPointNotification()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>ConnectionServ::RConnectionServ::CancelAccessPointNotification()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="165"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="159"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="163"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Tell the Connection Server we are cancelling our notification session. If no notification session is active, does nothing.</p>
				<p>This function is synchronous, in that it ensures the cancel has gone all the way through to the server before it returns. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxVariable id="class_connection_serv_1_1_r_connection_serv_1acdda3ca31819db793c631f83df2cac73">
		<apiName>iConnectionServImpl</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="private"/>
				<cxxVariableDeclaredType>
					<apiRelation href="class_connection_serv_1_1_c_connection_serv_impl.xml#class_connection_serv_1_1_c_connection_serv_impl">CConnectionServImpl</apiRelation> *</cxxVariableDeclaredType>
				<cxxVariableScopedName>ConnectionServ::RConnectionServ</cxxVariableScopedName>
				<cxxVariablePrototype>CConnectionServImpl * iConnectionServImpl</cxxVariablePrototype>
				<cxxVariableNameLookup>ConnectionServ::RConnectionServ::iConnectionServImpl</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/comms-infras/es_connectionserv.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="171"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc/>
		</cxxVariableDetail>
	</cxxVariable>
</cxxClass>