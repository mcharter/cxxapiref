<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_r_dir">
	<apiName>RDir</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassDerivations>
				<cxxClassDerivation>
					<cxxClassDerivationAccessSpecifier value="public"/>
					<cxxClassBaseClass href="class_r_sub_session_base.xml#class_r_sub_session_base">RSubSessionBase</cxxClassBaseClass>
				</cxxClassDerivation>
			</cxxClassDerivations>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="2414"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/f32file.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="2384"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="2429"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>Reads the entries contained in a directory.</p>
			<p>You must first open the directory, specifying an attribute mask which is used by <xref href="class_r_dir.xml#class_r_dir_1a1c9911bcfa864197e2fa0f4016b52930">Read()</xref> calls to filter the entry types required. Then, use one of the <xref href="class_r_dir.xml#class_r_dir_1a1c9911bcfa864197e2fa0f4016b52930">Read()</xref> functions to read the filtered entries. When the operation is complete, the directory should be closed using <xref href="class_r_dir.xml#class_r_dir_1afe34707c27664953dcf9744124c7f8cf">Close()</xref>
			</p>
			<p>There are two types of <xref href="class_r_dir.xml#class_r_dir_1a1c9911bcfa864197e2fa0f4016b52930">Read()</xref>: one works with a single entry at a time, requiring programs to iterate through the entries explicitly. The other works with an entire <xref href="class_t_entry_array.xml#class_t_entry_array">TEntryArray</xref>, allowing multiple entries to be read in one call. As well as making application program logic somewhat simpler, this type uses fewer calls to the server, and is more efficient.</p>
			<p>Each type of <xref href="class_r_dir.xml#class_r_dir_1a1c9911bcfa864197e2fa0f4016b52930">Read()</xref> can be performed either synchronously or asynchronously.</p>
			<p>It may be more convenient to use <xref href="class_r_fs.xml#class_r_fs_1a0268bb891bbe7048bf948b2a8db97a43">RFs::GetDir()</xref> than the <xref href="class_r_dir.xml#class_r_dir_1a1c9911bcfa864197e2fa0f4016b52930">Read()</xref> calls supported by this class. <xref href="class_r_fs.xml#class_r_fs_1a0268bb891bbe7048bf948b2a8db97a43">RFs::GetDir()</xref> has the advantage that it allows a directory s entries to be sorted in various ways. However, it does not provide asynchronous as well as synchronous variants and does not allow entries to be read individually.</p>
			<p>
				<xref href="class_r_fs.xml#class_r_fs">RFs</xref> </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_r_dir_1a23efce9b49fae71f10b79f2ea0ad9ebc">
		<apiName>Open</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>EFSRV_IMPORT_C <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>EFSRV_IMPORT_C TInt Open(RFs &amp;aFs, const TDesC &amp;aMatchName, const TUidType &amp;aUidType)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::Open(RFs &amp;,const TDesC &amp;,const TUidType &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_r_fs.xml#class_r_fs">RFs</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aFs</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_des_c16.xml#class_t_des_c16">TDesC</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aMatchName</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_uid_type.xml#class_t_uid_type">TUidType</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aUidType</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2384"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_r_dir_1a4eee9baef2eb526ae1b8ebd5f6dade3a">
		<apiName>Open</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>EFSRV_IMPORT_C <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>EFSRV_IMPORT_C TInt Open(RFs &amp;aFs, const TDesC &amp;aMatchName, TUint anAttMask)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::Open(RFs &amp;,const TDesC &amp;,TUint)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_r_fs.xml#class_r_fs">RFs</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aFs</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_des_c16.xml#class_t_des_c16">TDesC</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aMatchName</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1acdfcd7c66db8ed1b8dfefd71c9542d42">TUint</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anAttMask</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2385"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_r_dir_1afe34707c27664953dcf9744124c7f8cf">
		<apiName>Close</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>EFSRV_IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>EFSRV_IMPORT_C void Close()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::Close()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2386"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_r_dir_1a1c9911bcfa864197e2fa0f4016b52930">
		<apiName>Read</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>EFSRV_IMPORT_C <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>EFSRV_IMPORT_C TInt Read(TEntryArray &amp;anArray) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::Read(TEntryArray &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_entry_array.xml#class_t_entry_array">TEntryArray</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anArray</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2387"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_r_dir_1a9ae4195ca13c3981237111d4a8095d47">
		<apiName>Read</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>EFSRV_IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>EFSRV_IMPORT_C void Read(TEntryArray &amp;anArray, TRequestStatus &amp;aStatus) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::Read(TEntryArray &amp;,TRequestStatus &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_entry_array.xml#class_t_entry_array">TEntryArray</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anArray</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_request_status.xml#class_t_request_status">TRequestStatus</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aStatus</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2388"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_r_dir_1aa6819915591540ce608a2499f261f9ad">
		<apiName>Read</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>EFSRV_IMPORT_C <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>EFSRV_IMPORT_C TInt Read(TEntry &amp;anEntry) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::Read(TEntry &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_entry.xml#class_t_entry">TEntry</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anEntry</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2389"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_r_dir_1aea2ef6723d59487d252c3e92c4b84b90">
		<apiName>Read</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>EFSRV_IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>EFSRV_IMPORT_C void Read(TPckg&lt; TEntry &gt; &amp;anEntry, TRequestStatus &amp;aStatus) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::Read(TPckg&lt; TEntry &gt; &amp;,TRequestStatus &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_pckg.xml#class_t_pckg">TPckg</apiRelation>&lt; <apiRelation href="class_t_entry.xml#class_t_entry">TEntry</apiRelation> &gt; &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anEntry</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_request_status.xml#class_t_request_status">TRequestStatus</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aStatus</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2390"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_r_dir_1afb5989a6f2ee26f0e31f562c1d74f66d">
		<apiName>SendReceive</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="private"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>RDir</cxxFunctionScopedName>
				<cxxFunctionPrototype>TInt SendReceive(TInt aFunction, const TIpcArgs &amp;aArgs) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>RDir::SendReceive(TInt,const TIpcArgs &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_r_sub_session_base.xml#class_r_sub_session_base_1abfee930312ede77f6ee1a850be3e7ea5">RSubSessionBase::SendReceive(TInt,const TIpcArgs &amp;)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aFunction</cxxFunctionParameterDeclarationName>
						<apiDefNote>The opcode specifying the requested service. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_ipc_args.xml#class_t_ipc_args">TIpcArgs</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aArgs</cxxFunctionParameterDeclarationName>
						<apiDefNote>The message arguments.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/f32file.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2394"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Sends a message to the server and waits synchronously for a reply.</p>
				<p>An opcode specifies the service required. A set of message arguments is passed that can be used to specify client addresses, which the server can use to read from and write to the client address space.</p>
				<p>Note that this function will only fail if the server itself fails or environmental errors occur in the server. All requests made using this function are guaranteed to reach the server. This means that all synchronous client requests (typically those that return void) should be routed through this synchronous variant of <xref href="class_r_dir.xml#class_r_dir_1afb5989a6f2ee26f0e31f562c1d74f66d">SendReceive()</xref>.</p>
				<p>KErrNone if successful, otherwise one of the system-wide error codes. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxClassInherits>
		<cxxClassInheritsDetail>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1af9a75bd9f7400c9439e2f76f8d059d00">RSubSessionBase::CloseSubSession(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1ae2da2f53114e1af7938db52291b0fecf">RSubSessionBase::CreateAutoCloseSubSession(RSessionBase &amp;,TInt,const TIpcArgs &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1a50e62f82ea5de8fd858e7a75c21c0930">RSubSessionBase::CreateSubSession(const RSessionBase &amp;,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1ac1adf58e7adde023baf0525baeb2a0ca">RSubSessionBase::CreateSubSession(const RSessionBase &amp;,TInt,const TIpcArgs &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1a6ecd5459966453b3a99ac3f99d97e1bc">RSubSessionBase::RSubSessionBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1ae855884063702416b6aa73c30263706b">RSubSessionBase::Send(TInt)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1a1877065a894f19c8e75f076995e2b136">RSubSessionBase::Send(TInt,const TIpcArgs &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1a79a9c918d3d693edae2b91069339a6e4">RSubSessionBase::SendReceive(TInt)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1a31d1b25a10b3cf364677f050ea1b3a10">RSubSessionBase::SendReceive(TInt,TRequestStatus &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1aa2f319884f3ea300a0a61c9788bb5d93">RSubSessionBase::SendReceive(TInt,const TIpcArgs &amp;,TRequestStatus &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1a1239f2d6b3c11eed6965602c114886fd">RSubSessionBase::Session()const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_r_dir.xml#class_r_sub_session_base_1aabe5abe9803cadf198a0c429e2aa5f2e">RSubSessionBase::SubSessionHandle()const</cxxClassFunctionInherited>
		</cxxClassInheritsDetail>
	</cxxClassInherits>
</cxxClass>