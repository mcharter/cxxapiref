<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_t_lit_c">
	<apiName>TLitC</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="1541"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="1540"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="1590"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>Encapsulates literal text.</p>
			<p>This is always constructed using an _LIT macro.</p>
			<p>This class is build independent; i.e. for a non-Unicode build, an 8-bit build variant is generated; for a Unicode build, a 16 bit build variant is generated.</p>
			<p>The class has no explicit constructors. See the _LIT macro definition. </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_t_lit_c_1a6c7bf1e6e4ccc51554fe1ea6db2648f4">
		<apiName>operator&amp;</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="class_t_des_c16.xml#class_t_des_c16">TDesC</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>TLitC</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TDesC * operator&amp;() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>TLitC::operator&amp;()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1547"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2577"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2583"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Returns a const TDesC type pointer.</p>
				<p>A descriptor type pointer to this literal. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_t_lit_c_1ae0221979cc53c2e3c62071129d3902ea">
		<apiName>operator const TDesC &amp;</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>TLitC</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline operator const TDesC &amp;() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>TLitC::operator const TDesC &amp;()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1548"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2601"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2606"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Invoked by the compiler when a TLitC&lt;TInt&gt; type is passed to a function which is prototyped to take a const TDesC&amp; type. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_t_lit_c_1accd9fadb7b50d003b617c720a0edd3b6">
		<apiName>operator()</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="class_t_des_c16.xml#class_t_des_c16">TDesC</apiRelation> &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>TLitC</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TDesC &amp; operator()() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>TLitC::operator()()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1549"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2589"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2595"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Returns a const TDesC type reference.</p>
				<p>A descriptor type reference to this literal </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_t_lit_c_1a7e02ad3a3bc0fa96c1a69681bbc42f70">
		<apiName>operator const __TRefDesC</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>TLitC</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline operator const __TRefDesC() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>TLitC::operator const __TRefDesC()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1550"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2612"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2619"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Invoked by the compiler when a TLitC&lt;TInt&gt; type is passed to a function which is prototyped to take a const TRefByValue&lt;const TDesC&gt; type.</p>
				<p>
					<xref href="e32cmn_8h.xml#e32cmn_8h_1a4ea990c88a6937d6280a437e2efb527e">__TRefDesC</xref>. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxVariable id="class_t_lit_c_1aa3d9070b4b4732668ee06a79c852e058">
		<apiName>iTypeLength</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableDeclaredType>
					<apiRelation href="e32def_8h.xml#_1acdfcd7c66db8ed1b8dfefd71c9542d42">TUint</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName>TLitC</cxxVariableScopedName>
				<cxxVariablePrototype>TUint iTypeLength</cxxVariablePrototype>
				<cxxVariableNameLookup>TLitC::iTypeLength</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="1584"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc/>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxVariable id="class_t_lit_c_1aad09a53c8ecf21645059a4ac5c2d16c4">
		<apiName>iBuf</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableDeclaredType>__TText</cxxVariableDeclaredType>
				<cxxVariableScopedName>TLitC</cxxVariableScopedName>
				<cxxVariablePrototype>__TText iBuf[__Align(S)]</cxxVariablePrototype>
				<cxxVariableNameLookup>TLitC::iBuf</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32cmn.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="1589"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc/>
		</cxxVariableDetail>
	</cxxVariable>
</cxxClass>