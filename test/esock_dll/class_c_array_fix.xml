<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_c_array_fix">
	<apiName>CArrayFix</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassDerivations>
				<cxxClassDerivation>
					<cxxClassDerivationAccessSpecifier value="public"/>
					<cxxClassBaseClass href="class_c_array_fix_base.xml#class_c_array_fix_base">CArrayFixBase</cxxClassBaseClass>
				</cxxClassDerivation>
			</cxxClassDerivations>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="382"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="371"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="408"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>A thin templated base class for arrays of fixed length objects.</p>
			<p>The public functions provide standard array behaviour.</p>
			<p>The class is always derived from and is never instantiated explicitly. </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_c_array_fix_1ac697cc9cf74b9741be381c3c6aeebb5f">
		<apiName>CArrayFix</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline CArrayFix(TBufRep aRep, TInt aGranularity)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::CArrayFix(TBufRep,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32base_8h.xml#_1a477fbe9a94ebbd833fc678e7551300c1">TBufRep</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRep</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aGranularity</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="384"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="167"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="172"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1ac4dc18120857ccce2fc5729f15332b5e">
		<apiName>operator[]</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const T &amp; operator[](TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::operator[](TInt)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="385"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="178"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="196"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a const reference to the element located at the specified position within the array.</p>
				<p>Note that if a pointer to the returned referenced class T object is taken, be aware that the pointer value becomes invalid once elements have been added to, or removed from the array. Always refresh the pointer.</p>
				<p>A const reference to the required element.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1aa0f2bac884ec6087d5ae6369b9a34e12">
		<apiName>operator[]</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; operator[](TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::operator[](TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="386"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="202"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="220"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a non-const reference to the element located at the specified position within the array.</p>
				<p>Note that if a pointer to the returned referenced class T object is taken, be aware that the pointer value becomes invalid once elements have been added to, or removed from the array. Always refresh the pointer.</p>
				<p>A non-const reference to the required element.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1ac66511b3e8dfc4aff19c6ef599af9805">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const T &amp; At(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::At(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_fix_base.xml#class_c_array_fix_base_1ab828a6bc6914674377e6658e6c0c1b6d">CArrayFixBase::At(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="387"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="226"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="244"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a const reference to the element located at the specified position within the array.</p>
				<p>Note that if a pointer to the returned referenced class T object is taken, be aware that the pointer value becomes invalid once elements have been added to, or removed from the array. Always refresh the pointer.</p>
				<p>A const reference to the required element.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1ac451532e75b8e6eaa52c26b1940c642c">
		<apiName>End</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const T *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const T * End(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::End(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_fix_base.xml#class_c_array_fix_base_1a3d7ad0b90b40c48a8a6a6e6c66595043">CArrayFixBase::End(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="388"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="250"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="272"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the (const) first byte following the end of the contiguous region containing the element at the specified position within the array.</p>
				<p>For arrays implemented using flat buffers, the pointer always points to the first byte following the end of the buffer.</p>
				<p>For arrays implemented using segmented buffers, the pointer always points to the first byte following the end of the segment which contains the element.</p>
				<p>A pointer to the constant byte following the end of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a54455114d1e3119f76d4be51014b480b">
		<apiName>Back</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const T *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const T * Back(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::Back(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_fix_base.xml#class_c_array_fix_base_1ad594b74b563980dfdcbdda47fe3b81bb">CArrayFixBase::Back(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="389"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="278"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="301"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the (const) beginning of a contiguous region.</p>
				<p>For arrays implemented using flat buffers, the function always returns a pointer to the beginning of the buffer.</p>
				<p>For arrays implemented using segmented buffers, the function returns a pointer to the beginning of the segment for all elements in that segment except the first. If the element at position anIndex is the first in a segment, then the function returns a pointer the beginning of the previous segment.</p>
				<p>For the first element in the array, the function returns a NULL pointer.</p>
				<p>A pointer to the (const) beginning of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a27c9a6b6fb08a829ef48acb140e6a2c0">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; At(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::At(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="390"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="307"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="325"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a non-const reference to the element located at the specified position within the array.</p>
				<p>Note that if a pointer to the returned referenced class T object is taken, be aware that the pointer value becomes invalid once elements have been added to, or removed from the array. Always refresh the pointer.</p>
				<p>A non-const reference to the required element.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a0df627d9fae743b3d8dd8505d2c38469">
		<apiName>End</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T * End(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::End(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="391"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="331"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="351"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the first byte following the end of the contiguous region containing the element at the specified position within the array.</p>
				<p>For arrays implemented using flat buffers, the pointer always points to the first byte following the end of the buffer.</p>
				<p>For arrays implemented using segmented buffers, the pointer always points to the first byte following the end of the segment which contains the element.</p>
				<p>A pointer to the byte following the end of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a6263e7f9f5526d95b487f47a2526d35b">
		<apiName>Back</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T * Back(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::Back(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="392"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="357"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="380"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the beginning of a contiguous region.</p>
				<p>For arrays implemented using flat buffers, the function always returns a pointer to the beginning of the buffer.</p>
				<p>For arrays implemented using segmented buffers, the function returns a pointer to the beginning of the segment for all elements in that segment except the first. If the element at position anIndex is the first in a segment, then the function returns a pointer the beginning of the previous segment.</p>
				<p>For the first element in the array, the function returns a NULL pointer.</p>
				<p>A pointer to the beginning of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1ab18347f8849b6dfe174c57bbdccdc3a6">
		<apiName>AppendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void AppendL(const T &amp;aRef)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::AppendL(const T &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the class T element to be appended.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="393"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="386"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="396"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Appends a single element onto the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a6644ece0ae06a95badd846c559a0386b">
		<apiName>AppendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void AppendL(const T *aPtr, TInt aCount)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::AppendL(const T *,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote>A pointer to a contiguous set of type &lt;class T&gt; objects to be appended. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aCount</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of contiguous objects of type &lt;class T&gt; located at aPtr to be appended.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="394"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="402"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="417"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Appends one or more elements onto the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 23, if aCount is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a98b10e4a4f97fd76a722e33afd3b8ee3">
		<apiName>AppendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void AppendL(const T &amp;aRef, TInt aReplicas)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::AppendL(const T &amp;,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the &lt;class T&gt; object to be replicated and appended. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aReplicas</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of copies of the aRef element to be appended.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="395"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="423"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="436"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Appends replicated copies of an element onto the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 28 if aReplicas is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1afd55c918fee220295ab8dca0a8a8e7a5">
		<apiName>ExpandL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; ExpandL(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::ExpandL(TInt)</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_fix_base.xml#class_c_array_fix_base_1a2a4837d39526d53d306f1a481a6a81ed">CArrayFixBase::ExpandL(TInt)</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position within the array where the array is to be expanded and the new class T object is to be constructed.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="396"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="442"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="474"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Expands the array by one element at the specified position.</p>
				<p>It:</p>
				<p>1. expands the array by one element at the specified position</p>
				<p>2. constructs a new element at that position</p>
				<p>3. returns a reference to the new element.</p>
				<p>All existing elements from position anIndex to the end of the array are moved up, so that the element originally at position anIndex is now at position anIndex + 1 etc.</p>
				<p>The new element of type class T is constructed at position anIndex, using the default constructor of that class.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call.</p>
				<p>A reference to the newly constructed class T object at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21 if anIndex is negative or greater than the number of elements currently in the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a0fd858678d8f2c1b2f6b94051b25e80c">
		<apiName>ExtendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; ExtendL()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::ExtendL()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="397"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="480"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="505"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Expands the array by one element at the end of the array.</p>
				<p>It:</p>
				<p>1. expands the array by one element at the end of the array, i.e. at position <xref href="class_c_array_fix_base.xml#class_c_array_fix_base_1ad5bc874aceea074862134dc8e4937faa">CArrayFixBase::Count()</xref>
				</p>
				<p>2. constructs a new element at that position</p>
				<p>3. returns a reference to the new element.</p>
				<p>The new element of type class T is constructed at the end of the array, using the default constructor of that class.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call.</p>
				<p>A reference to the newly constructed class T object at the end of the array.</p>
				<p>
					<xref href="class_c_array_fix_base.xml#class_c_array_fix_base_1ad5bc874aceea074862134dc8e4937faa">CArrayFixBase::Count</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a6bfbf6c6c00a597f994c036024964bb4">
		<apiName>Find</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt Find(const T &amp;aRef, TKeyArrayFix &amp;aKey, TInt &amp;anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::Find(const T &amp;,TKeyArrayFix &amp;,TInt &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to an object of type class T whose key is used for comparison. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_fix.xml#class_t_key_array_fix">TKeyArrayFix</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a TInt supplied by the caller. On return, if the element is found, the reference is set to the position of that element within the array. The position is relative to zero, (i.e. the first element in the array is at position 0). If the element is not found and the array is not empty, then the value of the reference is set to the number of elements in the array. If the element is not found and the array is empty, then the reference is set to zero.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="398"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="511"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="538"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Finds the position of an element within the array, based on the matching of keys, using a sequential search.</p>
				<p>The array is searched sequentially for an element whose key matches the key of the supplied class T object. The search starts with the first element in the array.</p>
				<p>Note that where an array has elements with duplicate keys, the function only supplies the position of the first element in the array with that key.</p>
				<p>Zero, if the element with the specified key is found. Non-zero, if the element with the specified key is not found. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a00d98c116161dd1af220f147c0f84cd7">
		<apiName>FindIsq</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt FindIsq(const T &amp;aRef, TKeyArrayFix &amp;aKey, TInt &amp;anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::FindIsq(const T &amp;,TKeyArrayFix &amp;,TInt &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to an object of type class T whose key is used for comparison. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_fix.xml#class_t_key_array_fix">TKeyArrayFix</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a TInt supplied by the caller. On return, if the element is found, the reference is set to the position of that element within the array. The position is relative to zero, (i.e. the first element in the array is at position 0). If the element is not found and the array is not empty, then the reference is set to the position of the first element in the array with a key which is greater than the key of the object aRef. If the element is not found and the array is empty, then the reference is set to zero.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="399"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="544"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="575"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Finds the position of an element within the array, based on the matching of keys, using a binary search technique.</p>
				<p>The array is searched, using a binary search technique, for an element whose key matches the key of the supplied class T object.</p>
				<p>The array must be in key order.</p>
				<p>Note that where an array has elements with duplicate keys, the function cannot guarantee which element, with the given key value, it will return, except that it will find one of them.</p>
				<p>Zero, if the element with the specified key is found. Non-zero, if the element with the specified key is not found. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a74a29cf1dda526a89047edcfc3749ba2">
		<apiName>InsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void InsertL(TInt anIndex, const T &amp;aRef)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::InsertL(TInt,const T &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position within the array where the element is to be inserted. The position is relative to zero, i.e. zero implies that elements are inserted at the beginning of the array.</apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the class T object to be inserted into the array at position anIndex.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="400"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="581"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="602"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts an element into the array at the specified position.</p>
				<p>Note that passing a value of anIndex which is the same as the current number of elements in the array, has the effect of appending the element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21 if anIndex is negative, or is greater than the number of elements currently in the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a67a0ccf80a31291b3e5099ba8c22a7d6">
		<apiName>InsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void InsertL(TInt anIndex, const T *aPtr, TInt aCount)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::InsertL(TInt,const T *,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position within the array where the elements are to be inserted. The position is relative to zero, i.e. zero implies that elements are inserted at the beginning of the array.</apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote>A pointer to the first of the contiguous elements of type class T to be inserted into the array at position anIndex.</apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aCount</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of contiguous elements of type class T located at aPtr to be inserted into the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="401"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="608"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="635"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts one or more elements into the array at the specified position.</p>
				<p>The objects to be added must all be contiguous.</p>
				<p>Note that passing a value of anIndex which is the same as the current number of elements in the array, has the effect of appending the element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21 if anIndex is negative or is greater than the number of elements currently in the array. </p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 23 if aCount is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a27e572f84aae2adc1c21b70c993f7ee9">
		<apiName>InsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void InsertL(TInt anIndex, const T &amp;aRef, TInt aReplicas)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::InsertL(TInt,const T &amp;,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position within the array where elements are to be inserted. The position is relative to zero, i.e. zero implies that elements are inserted at the beginning of the array.</apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the class T object to be replicated and inserted into the array at position anIndex.</apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aReplicas</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of copies of the aRef element to be inserted into the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="402"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="641"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="668"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts replicated copies of an element into the array at the specified position.</p>
				<p>Note that passing a value of anIndex which is the same as the current number of elements in the array, has the effect of appending the element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or is greater than the number of elements currently in the array. </p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 28, if aReplicas is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1ab2e6235f70a6e85c4f22eb9b077d9420">
		<apiName>InsertIsqL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt InsertIsqL(const T &amp;aRef, TKeyArrayFix &amp;aKey)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::InsertIsqL(const T &amp;,TKeyArrayFix &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the element of type &lt;class T&gt; to be inserted into the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_fix.xml#class_t_key_array_fix">TKeyArrayFix</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="403"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="674"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="697"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts a single element into the array at a position determined by a key.</p>
				<p>The array MUST already be in key sequence (as defined by the key), otherwise the position of the new element is unpredictable, or duplicates may occur.</p>
				<p>Elements with duplicate keys are not permitted.</p>
				<p>The position within the array of the newly inserted element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrAlreadyExists An element with the same key already exists within the array. NB the array MUST already be in key sequence, otherwise the function may insert a duplicate and fail to leave with this value. </p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a8fca2c7436127b5e83efd767586844de">
		<apiName>InsertIsqAllowDuplicatesL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt InsertIsqAllowDuplicatesL(const T &amp;aRef, TKeyArrayFix &amp;aKey)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::InsertIsqAllowDuplicatesL(const T &amp;,TKeyArrayFix &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the element of type &lt;class T&gt; to be inserted into the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_fix.xml#class_t_key_array_fix">TKeyArrayFix</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="404"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="703"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="724"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts a single element into the array at a position determined by a key, allowing duplicates.</p>
				<p>The array MUST already be in key sequence (as defined by the key), otherwise the position of the new element is unpredictable.</p>
				<p>If the new element&apos;s key is a duplicate of an existing element&apos;s key, then the new element is positioned after the existing element.</p>
				<p>The position within the array of the newly inserted element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a73d1cd19c0ba3a1dc548e07f848c1f22">
		<apiName>ResizeL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void ResizeL(TInt aCount)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::ResizeL(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aCount</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of elements the array is to contain after the resizing operation.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="405"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="730"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="759"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Changes the size of the array so that it contains the specified number of elements.</p>
				<p>The following describes the effects of calling this function:</p>
				<p>1. If aCount is less than the current number of elements in the array, then the array is shrunk. The elements at positions aCount and above are discarded. The array buffer is not compressed.</p>
				<p>2. If aCount is greater than the current number of elements in the array, then the array is extended.</p>
				<p>3. New elements are replicated copies of an object of type &lt;class T&gt;, constructed using the default constructor of that class.</p>
				<p>The new elements are positioned after the existing elements in the array.</p>
				<p>The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves. The leave code is one of the system wide error codes. If the function leaves, the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 24, if aCount is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1a1714b73b6d7921e712b80ccc36446977">
		<apiName>ResizeL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void ResizeL(TInt aCount, const T &amp;aRef)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::ResizeL(TInt,const T &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aCount</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of elements the array is to contain after the resizing operation.</apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to an object of type &lt;class T&gt;, copies of which are used as the new elements of the array, if the array is extended.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="406"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="765"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="796"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Changes the size of the array so that it contains the specified number of elements.</p>
				<p>The following describes the effects of calling this function:</p>
				<p>1. If aCount is less than the current number of elements in the array, then the array is shrunk. The elements at positions aCount and above are discarded. The array buffer is not compressed.</p>
				<p>2. If aCount is greater than the current number of elements in the array, then the array is extended.</p>
				<p>3. New elements are replicated copies of aRef.</p>
				<p>The new elements are positioned after the existing elements in the array.</p>
				<p>The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves. The leave code is one of the system wide error codes. If the function leaves, the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 24, if aCount is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_1aaf9e8b30e66a91f34f7bfb7b107958b4">
		<apiName>Array</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="class_t_array.xml#class_t_array">TArray</apiRelation>&lt; T &gt;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TArray&lt; T &gt; Array() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix::Array()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="407"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="802"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="808"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Constructs and returns a TArray&lt;T&gt; object.</p>
				<p>A TArray&lt;T&gt; object representing this array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxClassInherits>
		<cxxClassInheritsDetail>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1aa5f4ec3cf4a6ee0720d8cef5f49571a2">CArrayFixBase::AtR(const CBase *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a9332965c85c8cd40b2aa89d30fa74780">CArrayFixBase::CArrayFixBase(TBufRep,TInt,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a1096056ab5233a348e9ac23a856afcbd">CArrayFixBase::Compress()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1ad5bc874aceea074862134dc8e4937faa">CArrayFixBase::Count()const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1aea4c4fa199ab6a1ce2f3273c147a15e6">CArrayFixBase::CountR(const CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a0a48e851ef51536e74ad8eae8a7f688f">CArrayFixBase::Delete(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1ac366ebf07a899be33720d79b2ee6effb">CArrayFixBase::Delete(TInt,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1af9b3dbe6ae3a52e52c65dc2c579e8366">CArrayFixBase::Find(const TAny *,TKeyArrayFix &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a943ed3546dc8d398e5160559b68d4fea">CArrayFixBase::FindIsq(const TAny *,TKeyArrayFix &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a74ca35541c4ce37e6ef846fac8cecdfc">CArrayFixBase::InsertIsqAllowDuplicatesL(const TAny *,TKeyArrayFix &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a625810302f839d7528f0e6ae8597d576">CArrayFixBase::InsertIsqL(const TAny *,TKeyArrayFix &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a2eed684551c181499bfcfd097cb00b58">CArrayFixBase::InsertL(TInt,const TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1ab9bf1169212cc6105bcbd120eb689e33">CArrayFixBase::InsertL(TInt,const TAny *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a3d64c6ad1faa7a89bb2d9c787055c9ff">CArrayFixBase::InsertRepL(TInt,const TAny *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a67029b460d062fec97d7cb3e3df1640c">CArrayFixBase::Length()const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a39ca2548f91bfae2dcd5d0527502c282">CArrayFixBase::Reset()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1accaf91d332f7b951cb00d3249a2e477b">CArrayFixBase::ResizeL(TInt,const TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1ab630d07d0518980df7e3fdd97e9fc1a3">CArrayFixBase::SetKey(TKeyArrayFix &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a09720a5e362d9334e33b3331fbc5eb12">CArrayFixBase::SetReserveFlatL(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1adbf2852d698fe50d5971cd903e210e68">CArrayFixBase::Sort(TKeyArrayFix &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_array_fix_base_1a24adf1bad260868b60d50069113c57bc">CArrayFixBase::~CArrayFixBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1a240de7932690a4e987d75690b0b6f82b">CBase::CBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1ac0a06aeab68b3e01be81f9dd79e011c6">CBase::Delete(CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1aae681a54d9c9b10c7d42e7e32ff109d5">CBase::Extension_(TUint,TAny *&amp;,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1af4c4965092a763b0856ccbfa3cf99eaf">CBase::operator new(TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1ab9e5f557dea4db22886189926687ddc1">CBase::operator new(TUint,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1aa464dd21494443ac109084ed03b81f28">CBase::operator new(TUint,TLeave)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1af8429815362d4df6fecd47179e0c5dfe">CBase::operator new(TUint,TLeave,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1a80505bdf8b1b20a2ed102307a78eeeeb">CBase::operator new(TUint,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix.xml#class_c_base_1a1390361b94424be22bb2b1020eb400ea">CBase::~CBase()</cxxClassFunctionInherited>
		</cxxClassInheritsDetail>
	</cxxClassInherits>
</cxxClass>