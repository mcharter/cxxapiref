<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_c_array_pak_3_01_t_any_01_4">
	<apiName>CArrayPak&lt; TAny &gt;</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassDerivations>
				<cxxClassDerivation>
					<cxxClassDerivationAccessSpecifier value="public"/>
					<cxxClassBaseClass href="class_c_array_pak_base.xml#class_c_array_pak_base">CArrayPakBase</cxxClassBaseClass>
				</cxxClassDerivation>
			</cxxClassDerivations>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="1013"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="997"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="1020"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>A template specialisation base class for variable length, packed, arrays.</p>
			<p>The array buffer organisation is defined at construction.</p>
			<p>The class is useful for constructing an array of variable length buffers, where the length is decided at run time.</p>
			<p>This class is also useful as a data member of a base class in a thin template class/base class pair where the type of the array element is not known until the owning thin template class is instantiated. </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_c_array_pak_3_01_t_any_01_4_1accc6b03a53204dd612d9faacdfe4206f">
		<apiName>CArrayPak</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>CArrayPak&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline CArrayPak(TBufRep aRep, TInt aGranularity)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayPak&lt; TAny &gt;::CArrayPak(TBufRep,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32base_8h.xml#_1a477fbe9a94ebbd833fc678e7551300c1">TBufRep</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRep</cxxFunctionParameterDeclarationName>
						<apiDefNote>A pointer to a function used to expand the array buffer. The organisation of the array buffer is implied by the choice of this function. For a flat array buffer, pass (TBufRep)CBufFlat::NewL. For a segmented array buffer, pass (TBufRep)CBufSeg::NewL. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aGranularity</cxxFunctionParameterDeclarationName>
						<apiDefNote>The granularity of the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1015"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2205"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2222"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Constructs a variable array with the specified granularity and buffer organisation.</p>
				<p>Note that no memory is allocated to the array buffer by this constructor.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 19, if aGranularity is not positive. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_pak_3_01_t_any_01_4_1a9f73090264c7c70443d8a97a886f1a60">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayPak&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TAny * At(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayPak&lt; TAny &gt;::At(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_pak_base.xml#class_c_array_pak_base_1a286cdfe3fff1823d33aeb2ed0be004ed">CArrayPakBase::At(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array, relative to zero; i.e. zero implies the first element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1016"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2227"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2244"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the untyped element located at the specified position within the array.</p>
				<p>The compiler uses this variant of the function if the returned reference is used in an expression where that reference cannot be modified.</p>
				<p>A pointer to the const element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_pak_3_01_t_any_01_4_1a121a7c2a119e96c0ca403fa7d1442c2b">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayPak&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TAny * At(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayPak&lt; TAny &gt;::At(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array, relative to zero; i.e. zero implies the first element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1017"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2249"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2266"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the untyped element located at the specified position within the array.</p>
				<p>The compiler uses this variant of the function if the returned reference is used in an expression where that reference can be modified.</p>
				<p>A pointer to the non-const element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_pak_3_01_t_any_01_4_1a4b271ef8eb4e80ba52b3d891cd1e1814">
		<apiName>AppendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayPak&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void AppendL(const TAny *aPtr, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayPak&lt; TAny &gt;::AppendL(const TAny *,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote>A pointer to an untyped element to be appended. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the untyped element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1018"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2271"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2282"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Appends the untyped element of the specified length onto the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function attempted to expand the array buffer and there is insufficient memory available. In this case, the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_pak_3_01_t_any_01_4_1ad3fa180f59abca2f7bac9f851be493e5">
		<apiName>ExtendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayPak&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TAny * ExtendL(TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayPak&lt; TAny &gt;::ExtendL(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the new element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="1019"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2287"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2303"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Expands the array by one element of the specified length at the end of the array, and returns a pointer to this new location.</p>
				<p>As elements are untyped, no construction is possible and the content of the new location remains undefined.</p>
				<p>A pointer to the new element location at the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function attempted to expand the array buffer and there is insufficient memory available. In this case, the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxClassInherits>
		<cxxClassInheritsDetail>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a82a80f9a71dac646c66a9844e5e44584">CArrayPakBase::AtR(const CBase *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1aa6b66b330f1e9f0b5b4c19f85a77a9ed">CArrayPakBase::BuildVarArrayL(CArrayVarFlat&lt; TAny &gt; *&amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a64ccea4e361f5c99cec5d6940fba1373">CArrayPakBase::CArrayPakBase(TBufRep,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1abb8f42256138986d92c1f6e37d491411">CArrayPakBase::Compress()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a4f3d5f8dcb7446be81fe297d862774bb">CArrayPakBase::Count()const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a6ea3838bfc9cb17746742a72efcba98d">CArrayPakBase::CountR(const CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a8929f9156e4796850d9dd8f741c9b1fb">CArrayPakBase::Delete(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a371bfc85e9eb58c19130d33c31cb356a">CArrayPakBase::Delete(TInt,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1ac15b0d1118d957b9167d93ea12417762">CArrayPakBase::ExpandL(TInt,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1af79f6a2c7d1e1a935d64c7fadad6dc57">CArrayPakBase::Find(const TAny *,TKeyArrayPak &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1aaccc6609328893115854a6be81bc359d">CArrayPakBase::FindIsq(const TAny *,TKeyArrayPak &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a01045ac389250357461f1984b5febdb6">CArrayPakBase::GetOffset(TInt)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a022c97fb2f965adc145d352ab14fe803">CArrayPakBase::InsertIsqAllowDuplicatesL(const TAny *,TInt,TKeyArrayPak &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a53b1215c3d12b04e24e63f678fb7bd6b">CArrayPakBase::InsertIsqL(const TAny *,TInt,TKeyArrayPak &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1accf5574dcf56bb66ba4f4e3e17be5767">CArrayPakBase::InsertL(TInt,const TAny *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1ab554dbc893688077abfe1fec5ba38f28">CArrayPakBase::Length(TInt)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1ad25d4a60a67c4e94c33f845ad1e5d6ee">CArrayPakBase::Reset()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1a123fea8112c7d4d8d421d641552dccbd">CArrayPakBase::SetKey(TKeyArrayPak &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1abeee483c97a9efbe58323ca227093372">CArrayPakBase::SortL(TKeyArrayVar &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_array_pak_base_1af1aeb3e5b74dff000df98d9a9d195eb3">CArrayPakBase::~CArrayPakBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1a240de7932690a4e987d75690b0b6f82b">CBase::CBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1ac0a06aeab68b3e01be81f9dd79e011c6">CBase::Delete(CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1aae681a54d9c9b10c7d42e7e32ff109d5">CBase::Extension_(TUint,TAny *&amp;,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1af4c4965092a763b0856ccbfa3cf99eaf">CBase::operator new(TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1ab9e5f557dea4db22886189926687ddc1">CBase::operator new(TUint,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1aa464dd21494443ac109084ed03b81f28">CBase::operator new(TUint,TLeave)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1af8429815362d4df6fecd47179e0c5dfe">CBase::operator new(TUint,TLeave,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1a80505bdf8b1b20a2ed102307a78eeeeb">CBase::operator new(TUint,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_pak_3_01_t_any_01_4.xml#class_c_base_1a1390361b94424be22bb2b1020eb400ea">CBase::~CBase()</cxxClassFunctionInherited>
		</cxxClassInheritsDetail>
	</cxxClassInherits>
</cxxClass>