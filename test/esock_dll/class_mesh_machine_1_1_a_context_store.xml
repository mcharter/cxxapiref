<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_mesh_machine_1_1_a_context_store">
	<apiName>MeshMachine::AContextStore</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="905"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="904"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="989"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>If an activity has a transition or fork that is blocked by a mutex, the context must be stored so that when the transition or fork is unblocked it would be able to continue with the context that it had before it was blocked. If this aggregate wasn&apos;t used in the previous scenario, the context of the event that triggered the unblocking would be used, and this may have the wrong message, or event originator set.</p>
			<p>Error recovery is another scenario this class is useful in. </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxVariable id="class_mesh_machine_1_1_a_context_store_1ae926cb43d753589b4ac522b01a6814b2">
		<apiName>KInterfaceId</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableStorageClassSpecifierStatic/>
				<cxxVariableDeclaredType>const <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName>MeshMachine::AContextStore</cxxVariableScopedName>
				<cxxVariablePrototype>static const TInt KInterfaceId</cxxVariablePrototype>
				<cxxVariableNameLookup>MeshMachine::AContextStore::KInterfaceId</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="910"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>Interface id </p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxFunction id="class_mesh_machine_1_1_a_context_store_1a97411929c910eb304df9e4d9d450e121">
		<apiName>AContextStore</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="protected"/>
				<cxxFunctionExplicit/>
				<cxxFunctionInline/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>MeshMachine::AContextStore</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline AContextStore()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>MeshMachine::AContextStore::AContextStore()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="917"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="916"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="918"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Constructor for <xref href="class_mesh_machine_1_1_a_context_store.xml#class_mesh_machine_1_1_a_context_store">AContextStore</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_mesh_machine_1_1_a_context_store_1a96d12b82eeaee4edc6b7160072f1521f">
		<apiName>~AContextStore</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="protected"/>
				<cxxFunctionInline/>
				<cxxFunctionDestructor/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>MeshMachine::AContextStore</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline ~AContextStore()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>MeshMachine::AContextStore::~AContextStore()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="923"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/cs_connectionserv.cpp"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="922"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="925"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Destructor for <xref href="class_mesh_machine_1_1_a_context_store.xml#class_mesh_machine_1_1_a_context_store">AContextStore</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_mesh_machine_1_1_a_context_store_1a71065f9e414c410565ac192a81b2f0b1">
		<apiName>Retry</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>MeshMachine::AContextStore</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Retry(CNodeActivityBase &amp;aActivity, TNodeContextBase &amp;aContext)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>MeshMachine::AContextStore::Retry(CNodeActivityBase &amp;,TNodeContextBase &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_mesh_machine_1_1_c_node_activity_base.xml#class_mesh_machine_1_1_c_node_activity_base">CNodeActivityBase</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aActivity</cxxFunctionParameterDeclarationName>
						<apiDefNote>The activity to retry </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_mesh_machine_1_1_t_node_context_base.xml#class_mesh_machine_1_1_t_node_context_base">TNodeContextBase</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aContext</cxxFunctionParameterDeclarationName>
						<apiDefNote>The context within which the retrying is taking place. NOTE: This is not the stored context</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="937"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Used for error recovery. If the context is stored, loads the stored context and reruns the last transition that was run.</p>
				<p>
					<xref href="class_mesh_machine_1_1_a_context_store.xml#class_mesh_machine_1_1_a_context_store_1ad00173536573885c379d3778c96ea444">StoreContext</xref> </p>
				<p>
					<xref href="class_mesh_machine_1_1_a_context_store.xml#class_mesh_machine_1_1_a_context_store_1acebf85faf5ac2ccd9587e7a1268b3d2e">LoadContext</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_mesh_machine_1_1_a_context_store_1ad00173536573885c379d3778c96ea444">
		<apiName>StoreContext</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C <apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>MeshMachine::AContextStore</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C TInt StoreContext(const TNodeContextBase &amp;aContext)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>MeshMachine::AContextStore::StoreContext(const TNodeContextBase &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_mesh_machine_1_1_t_node_context_base.xml#class_mesh_machine_1_1_t_node_context_base">TNodeContextBase</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aContext</cxxFunctionParameterDeclarationName>
						<apiDefNote>The context to store </apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="946"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Store context in buffer. Designed to be called from a transition to store the transitions context for error recovery or to wait on a mutex.</p>
				<p>Error code. <tt>KErrNone</tt> if storage is successful. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_mesh_machine_1_1_a_context_store_1a93e1817909e3c9502a21619ab793b3c7">
		<apiName>IsStored</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>IMPORT_C <apiRelation href="e32def_8h.xml#_1a20c972998428c427c873ed496231115c">TBool</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>MeshMachine::AContextStore</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C TBool IsStored() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>MeshMachine::AContextStore::IsStored()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="952"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Check of the context is stored. <tt>ETrue</tt> if a context is stored. <tt>EFalse</tt> otherwise. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_mesh_machine_1_1_a_context_store_1a69df8294c17a60e443f838e06e8e7d1e">
		<apiName>RetryingForMessageId</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>IMPORT_C const <apiRelation href="class_messages_1_1_t_node_signal_1_1_t_message_id.xml#class_messages_1_1_t_node_signal_1_1_t_message_id">Messages::TNodeSignal::TMessageId</apiRelation> &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>MeshMachine::AContextStore</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C const Messages::TNodeSignal::TMessageId &amp; RetryingForMessageId() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>MeshMachine::AContextStore::RetryingForMessageId()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="960"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Get the id of the message which requested <tt>
						<xref href="class_mesh_machine_1_1_a_context_store.xml#class_mesh_machine_1_1_a_context_store_1a71065f9e414c410565ac192a81b2f0b1">Retry()</xref>
					</tt> Message Id of message which kicked off the <tt>Retry</tt> </p>
				<p>
					<xref href="class_mesh_machine_1_1_a_context_store.xml#class_mesh_machine_1_1_a_context_store_1a71065f9e414c410565ac192a81b2f0b1">AContextStore::Retry</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_mesh_machine_1_1_a_context_store_1acebf85faf5ac2ccd9587e7a1268b3d2e">
		<apiName>LoadContext</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="protected"/>
				<cxxFunctionDeclaredType>IMPORT_C <apiRelation href="class_mesh_machine_1_1_t_node_context_base.xml#class_mesh_machine_1_1_t_node_context_base">TNodeContextBase</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>MeshMachine::AContextStore</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C TNodeContextBase * LoadContext(AMMNodeBase &amp;aNode, CNodeActivityBase *aNodeActivity, TDes8 &amp;aCtxBuff, TDes8 &amp;aMsgBuff, const Messages::TNodeId &amp;aDummy)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>MeshMachine::AContextStore::LoadContext(AMMNodeBase &amp;,CNodeActivityBase *,TDes8 &amp;,TDes8 &amp;,const Messages::TNodeId &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_mesh_machine_1_1_a_m_m_node_base.xml#class_mesh_machine_1_1_a_m_m_node_base">AMMNodeBase</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aNode</cxxFunctionParameterDeclarationName>
						<apiDefNote>The node for the context </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_mesh_machine_1_1_c_node_activity_base.xml#class_mesh_machine_1_1_c_node_activity_base">CNodeActivityBase</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aNodeActivity</cxxFunctionParameterDeclarationName>
						<apiDefNote>The activity for the context. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_des8.xml#class_t_des8">TDes8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aCtxBuff</cxxFunctionParameterDeclarationName>
						<apiDefNote>A memory buffer in which the context will be created. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_des8.xml#class_t_des8">TDes8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aMsgBuff</cxxFunctionParameterDeclarationName>
						<apiDefNote>A memory buffer in which the message will be created. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_messages_1_1_t_node_id.xml#class_messages_1_1_t_node_id">Messages::TNodeId</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aDummy</cxxFunctionParameterDeclarationName>
						<apiDefNote>Will become the recipient node id in the context.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="978"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Load a stored context. Once the stored context has been loaded the status of <tt>iContextDesc</tt> is undefined and load shouldn&apos;t be called again until something has been stored.</p>
				<p>The pointer returned uses memory allocated in the <tt>aCtxBuff</tt> that is passed in, and as such, does not need to be freed. However <tt>aCtxBuff</tt> and <tt>aMsgBuff</tt> must be cleaned up after use.</p>
				<p>Pointer to loaded context </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxVariable id="class_mesh_machine_1_1_a_context_store_1a6bfee392d0dc70e6cf8534489d01d5e7">
		<apiName>iContextDesc</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="protected"/>
				<cxxVariableDeclaredType>
					<apiRelation href="class_r_buf8.xml#class_r_buf8">RBuf8</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName>MeshMachine::AContextStore</cxxVariableScopedName>
				<cxxVariablePrototype>RBuf8 iContextDesc</cxxVariablePrototype>
				<cxxVariableNameLookup>MeshMachine::AContextStore::iContextDesc</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="984"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>Buffer to store the context. </p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxVariable id="class_mesh_machine_1_1_a_context_store_1a6efb52d7652b573d69a5045cd3922826">
		<apiName>iRetryingForMessageId</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="protected"/>
				<cxxVariableDeclaredType>
					<apiRelation href="class_messages_1_1_t_node_signal_1_1_t_message_id.xml#class_messages_1_1_t_node_signal_1_1_t_message_id">Messages::TNodeSignal::TMessageId</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName>MeshMachine::AContextStore</cxxVariableScopedName>
				<cxxVariablePrototype>Messages::TNodeSignal::TMessageId iRetryingForMessageId</cxxVariablePrototype>
				<cxxVariableNameLookup>MeshMachine::AContextStore::iRetryingForMessageId</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/elements/mm_activities.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="988"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>Message id of the message which kicked off the retry attempt </p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
</cxxClass>