<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_c_array_fix_3_01_t_any_01_4">
	<apiName>CArrayFix&lt; TAny &gt;</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassDerivations>
				<cxxClassDerivation>
					<cxxClassDerivationAccessSpecifier value="public"/>
					<cxxClassBaseClass href="class_c_array_fix_base.xml#class_c_array_fix_base">CArrayFixBase</cxxClassBaseClass>
				</cxxClassDerivation>
			</cxxClassDerivations>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="425"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="413"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="437"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>A template specialisation base class for arrays of fixed length untyped objects.</p>
			<p>The public functions provide standard array behaviour.</p>
			<p>The class is always derived from and is never instantiated explicitly. </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a403b1387f9c5587a947f22c483d66571">
		<apiName>CArrayFix</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline CArrayFix(TBufRep aRep, TInt aRecordLength, TInt aGranularity)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::CArrayFix(TBufRep,TInt,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32base_8h.xml#_1a477fbe9a94ebbd833fc678e7551300c1">TBufRep</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRep</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRecordLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aGranularity</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="427"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="813"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="818"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1af63f4ebad1333a5ae40c9d86b7b6ba26">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TAny * At(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::At(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_fix_base.xml#class_c_array_fix_base_1ab828a6bc6914674377e6658e6c0c1b6d">CArrayFixBase::At(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="428"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="823"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="838"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the untyped element located at the specified position within the array.</p>
				<p>A pointer to the untyped element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32User-CBase 21, if anIndex is negative or is greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a350cf4ab185b2bc79233daec359509c2">
		<apiName>End</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TAny * End(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::End(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_fix_base.xml#class_c_array_fix_base_1a3d7ad0b90b40c48a8a6a6e6c66595043">CArrayFixBase::End(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="429"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="843"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="863"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the first byte following the end of the contiguous region containing the element at the specfied position within the array.</p>
				<p>For flat buffers, the pointer always points to the first byte following the end of the buffer.</p>
				<p>For segmented buffers, the pointer always points to the first byte following the end of the segment which contains the element.</p>
				<p>A pointer to the byte following the end of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a0ba57df48ac68b81a1b18ee36c8c94ab">
		<apiName>Back</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TAny * Back(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::Back(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_fix_base.xml#class_c_array_fix_base_1ad594b74b563980dfdcbdda47fe3b81bb">CArrayFixBase::Back(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="430"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="868"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="890"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the beginning of a contiguous region.</p>
				<p>For flat buffers, the function always returns a pointer to the beginning of the buffer.</p>
				<p>For segmented buffers, the function returns a pointer to the beginning of the segment for all elements in that segment except the first. If the element at the specified position is the first in a segment, then the function returns a pointer the beginning of the previous segment.</p>
				<p>For the first element in the array, the function returns a NULL pointer.</p>
				<p>A pointer to the beginning of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32User-CBase 21, if anIndex is negative or is greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a4b194fab03a893cbfe0b6f1a7879f0a9">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TAny * At(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::At(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="431"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="895"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="910"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the untyped element located at the specified position within the array.</p>
				<p>A pointer to the untyped element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32User-CBase 21, if anIndex is negative or is greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a3b46eb2292731f2a994a333c47735e1d">
		<apiName>End</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TAny * End(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::End(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="432"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="915"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="935"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the first byte following the end of the contiguous region containing the element at the specfied position within the array.</p>
				<p>For flat buffers, the pointer always points to the first byte following the end of the buffer.</p>
				<p>For segmented buffers, the pointer always points to the first byte following the end of the segment which contains the element.</p>
				<p>A pointer to the byte following the end of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a07fae14a505e074380f98e09a16f2915">
		<apiName>Back</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TAny * Back(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::Back(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array. The position is relative to zero; i.e. zero implies the first element in the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="433"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="940"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="962"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer to the beginning of a contiguous region.</p>
				<p>For flat buffers, the function always returns a pointer to the beginning of the buffer.</p>
				<p>For segmented buffers, the function returns a pointer to the beginning of the segment for all elements in that segment except the first. If the element at the specified position is the first in a segment, then the function returns a pointer the beginning of the previous segment.</p>
				<p>For the first element in the array, the function returns a NULL pointer.</p>
				<p>A pointer to the beginning of the contiguous region.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32User-CBase 21, if anIndex is negative or is greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a31c85f3fd802a2fd39653b4f38a9c2a0">
		<apiName>AppendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void AppendL(const TAny *aPtr)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::AppendL(const TAny *)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote>A pointer to an untyped element to be appended.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="434"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="967"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="977"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Appends the specified untyped element onto the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a19658c4895f43d55b0e11f9d4539b9a6">
		<apiName>AppendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void AppendL(const TAny *aPtr, TInt aCount)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::AppendL(const TAny *,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote>A pointer to the first of the contiguous untyped elements to be appended. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aCount</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of contiguous elements located at aPtr to be appended.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="435"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="982"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="995"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Appends one or more untyped elements onto the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call. </p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 23, if aCount is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_fix_3_01_t_any_01_4_1a40b52f4c615e01d0612a3415a4c7b9a5">
		<apiName>ExtendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayFix&lt; TAny &gt;</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TAny * ExtendL()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayFix&lt; TAny &gt;::ExtendL()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="436"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1000"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1014"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Expands the array by the length of one element at the end of the array and returns a pointer to this new location.</p>
				<p>As elements are untyped, no construction is possible and the content of the new location remains undefined.</p>
				<p>A pointer to the new element location at the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function may attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxClassInherits>
		<cxxClassInheritsDetail>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1aa5f4ec3cf4a6ee0720d8cef5f49571a2">CArrayFixBase::AtR(const CBase *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a9332965c85c8cd40b2aa89d30fa74780">CArrayFixBase::CArrayFixBase(TBufRep,TInt,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a1096056ab5233a348e9ac23a856afcbd">CArrayFixBase::Compress()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1ad5bc874aceea074862134dc8e4937faa">CArrayFixBase::Count()const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1aea4c4fa199ab6a1ce2f3273c147a15e6">CArrayFixBase::CountR(const CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a0a48e851ef51536e74ad8eae8a7f688f">CArrayFixBase::Delete(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1ac366ebf07a899be33720d79b2ee6effb">CArrayFixBase::Delete(TInt,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a2a4837d39526d53d306f1a481a6a81ed">CArrayFixBase::ExpandL(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1af9b3dbe6ae3a52e52c65dc2c579e8366">CArrayFixBase::Find(const TAny *,TKeyArrayFix &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a943ed3546dc8d398e5160559b68d4fea">CArrayFixBase::FindIsq(const TAny *,TKeyArrayFix &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a74ca35541c4ce37e6ef846fac8cecdfc">CArrayFixBase::InsertIsqAllowDuplicatesL(const TAny *,TKeyArrayFix &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a625810302f839d7528f0e6ae8597d576">CArrayFixBase::InsertIsqL(const TAny *,TKeyArrayFix &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a2eed684551c181499bfcfd097cb00b58">CArrayFixBase::InsertL(TInt,const TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1ab9bf1169212cc6105bcbd120eb689e33">CArrayFixBase::InsertL(TInt,const TAny *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a3d64c6ad1faa7a89bb2d9c787055c9ff">CArrayFixBase::InsertRepL(TInt,const TAny *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a67029b460d062fec97d7cb3e3df1640c">CArrayFixBase::Length()const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a39ca2548f91bfae2dcd5d0527502c282">CArrayFixBase::Reset()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1accaf91d332f7b951cb00d3249a2e477b">CArrayFixBase::ResizeL(TInt,const TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1ab630d07d0518980df7e3fdd97e9fc1a3">CArrayFixBase::SetKey(TKeyArrayFix &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a09720a5e362d9334e33b3331fbc5eb12">CArrayFixBase::SetReserveFlatL(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1adbf2852d698fe50d5971cd903e210e68">CArrayFixBase::Sort(TKeyArrayFix &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_array_fix_base_1a24adf1bad260868b60d50069113c57bc">CArrayFixBase::~CArrayFixBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1a240de7932690a4e987d75690b0b6f82b">CBase::CBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1ac0a06aeab68b3e01be81f9dd79e011c6">CBase::Delete(CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1aae681a54d9c9b10c7d42e7e32ff109d5">CBase::Extension_(TUint,TAny *&amp;,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1af4c4965092a763b0856ccbfa3cf99eaf">CBase::operator new(TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1ab9e5f557dea4db22886189926687ddc1">CBase::operator new(TUint,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1aa464dd21494443ac109084ed03b81f28">CBase::operator new(TUint,TLeave)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1af8429815362d4df6fecd47179e0c5dfe">CBase::operator new(TUint,TLeave,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1a80505bdf8b1b20a2ed102307a78eeeeb">CBase::operator new(TUint,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_fix_3_01_t_any_01_4.xml#class_c_base_1a1390361b94424be22bb2b1020eb400ea">CBase::~CBase()</cxxClassFunctionInherited>
		</cxxClassInheritsDetail>
	</cxxClassInherits>
</cxxClass>