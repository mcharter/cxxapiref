<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_c_array_var">
	<apiName>CArrayVar</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassDerivations>
				<cxxClassDerivation>
					<cxxClassDerivationAccessSpecifier value="public"/>
					<cxxClassBaseClass href="class_c_array_var_base.xml#class_c_array_var_base">CArrayVarBase</cxxClassBaseClass>
				</cxxClassDerivation>
			</cxxClassDerivations>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="774"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="763"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="790"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>A thin templated base class for variable length arrays.</p>
			<p>The public functions provide standard array behaviour.</p>
			<p>The class is always derived from and is never instantiated explicitly. </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_c_array_var_1a7c6bb7a3ea3d5426f9cc83593e0c7062">
		<apiName>CArrayVar</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType/>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline CArrayVar(TBufRep aRep, TInt aGranularity)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::CArrayVar(TBufRep,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32base_8h.xml#_1a477fbe9a94ebbd833fc678e7551300c1">TBufRep</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRep</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aGranularity</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="776"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1319"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1324"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1ac20b0fb977feb3df572bec9412a44c78">
		<apiName>operator[]</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const T &amp; operator[](TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::operator[](TInt)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array, relative to zero; i.e. zero implies the first element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="777"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1330"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1347"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a reference to the const element located at the specified position within the array.</p>
				<p>The compiler uses this variant of the function if the returned reference is used in an expression where it cannot be modified.</p>
				<p>A const reference to the element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a0bd9f7e1aee8442b60a0f085b9cd7fc4">
		<apiName>operator[]</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; operator[](TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::operator[](TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array, relative to zero; i.e. zero implies the first element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="778"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1353"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1371"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a reference to the element located at the specified position within the array.</p>
				<p>The compiler uses this variant of the function if the returned reference is used in an expression where it can be modified.</p>
				<p>A reference to the non-const element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1aa798a8afdb07734a573f9577572bbc1b">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const T &amp; At(TInt anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::At(TInt)const</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_var_base.xml#class_c_array_var_base_1a61015740adaac2867675bab5920fb75d">CArrayVarBase::At(TInt)const</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array, relative to zero; i.e. zero implies the first element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="779"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1377"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1394"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a reference to the const element located at the specified position within the array.</p>
				<p>The compiler uses this variant of the function if the returned reference is used in an expression where it cannot be modified.</p>
				<p>A const reference to the element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a33be89682bccb50561cb1ff8399cab8c">
		<apiName>At</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; At(TInt anIndex)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::At(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position of the element within the array, relative to zero; i.e. zero implies the first element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="780"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1399"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1416"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a reference to the element located at the specified position within the array.</p>
				<p>The compiler uses this variant of the function if the returned reference is used in an expression where it can be modified.</p>
				<p>A reference to the non-const element located at position anIndex within the array.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or greater than or equal to the number of objects currently within the array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a285b2cbcbe251d08a70f9939a28253f4">
		<apiName>AppendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void AppendL(const T &amp;aRef, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::AppendL(const T &amp;,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the &lt;class T&gt; element to be appended. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the element to be appended.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="781"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1422"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1436"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Appends an element of a specified length onto the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function always attempts to allocate a cell to contain the new element and may also attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case, the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 30, if aLength is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1adf141ce15efc824040ab5bfa06ba6716">
		<apiName>ExpandL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; ExpandL(TInt anIndex, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::ExpandL(TInt,TInt)</cxxFunctionNameLookup>
				<cxxFunctionReimplemented href="class_c_array_var_base.xml#class_c_array_var_base_1a7f5aed90e2e28f606df61aee4a916b31">CArrayVarBase::ExpandL(TInt,TInt)</cxxFunctionReimplemented>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position within the array where the array is to be expanded and the new &lt;class T&gt; object is to be constructed.</apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the new element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="782"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1442"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1478"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Expands the array by one element of specified length at the specified position.</p>
				<p>It:</p>
				<p>1. expands the array by one element position anIndex</p>
				<p>2. constructs a new element of specified length at that position</p>
				<p>3. returns a reference to the new element.</p>
				<p>All existing elements from position anIndex to the end of the array are moved up, so that the element originally at position anIndex is now at position anIndex + 1 etc.</p>
				<p>The new element of type &lt;class T&gt; and length aLength is constructed at position anIndex, using the default constructor of that class.</p>
				<p>A reference to the newly constructed &lt;class T&gt; object at position anIndex within the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function always attempts to allocate a cell to contain the new element and may also attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case, the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or is greater than the number of elements currently in the array. </p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 30, if aLength is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1ae7bc0885e61422a66059fd7d341db2e0">
		<apiName>ExtendL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>T &amp;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline T &amp; ExtendL(TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::ExtendL(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the new element.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="783"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1484"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1512"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Expands the array by one element of specified length at the end of the array.</p>
				<p>It:</p>
				<p>1. expands the array by one element at the end of the array, i.e. at position <xref href="class_c_array_var_base.xml#class_c_array_var_base_1af56230d7653e6784e23c493495ec0a5f">CArrayVarBase::Count()</xref>
				</p>
				<p>2. constructs a new element of specified length at that position.</p>
				<p>3. returns a reference to the new element.</p>
				<p>The new element of type &lt;class T&gt; is constructed at the end of the array, using the default constructor of that class.</p>
				<p>A reference to the newly constructed &lt;class T&gt; object at the end of the array.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function always attempts to allocate a cell to contain the new element and may also attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case, the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 30, if aLength is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a584aaceab810485dcfb2d50feb3009e4">
		<apiName>Find</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt Find(const T &amp;aRef, TKeyArrayVar &amp;aKey, TInt &amp;anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::Find(const T &amp;,TKeyArrayVar &amp;,TInt &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to an object of type &lt;class T&gt; whose key is used for comparison. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_var.xml#class_t_key_array_var">TKeyArrayVar</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>A TInt supplied by the caller. On return, if the element is found, this is set to the position of that element within the array. The position is relative to zero, (i.e. the first element in the array is at position 0). If the element is not found or the array is empty, then this is undefined.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="784"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1518"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1542"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Finds the position of an element within the array, based on the matching of keys, using a sequential search.</p>
				<p>The array is searched sequentially for an element whose key matches the key of the supplied object. The search starts with the first element in the array.</p>
				<p>Note that where an array has elements with duplicate keys, the function only supplies the position of the first element in the array with that key.</p>
				<p>Zero, if the element with the specified key is found. Non-zero, if the element with the specified key is not found. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a26e98e59d00683e024a396c729e69aee">
		<apiName>FindIsq</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt FindIsq(const T &amp;aRef, TKeyArrayVar &amp;aKey, TInt &amp;anIndex) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::FindIsq(const T &amp;,TKeyArrayVar &amp;,TInt &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to an object of type &lt;class T&gt; whose key is used for comparison. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_var.xml#class_t_key_array_var">TKeyArrayVar</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>A TInt supplied by the caller. On return, if the element is found, this is set to the position of that element within the array. The position is relative to zero, (i.e. the first element in the array is at position zero). If the element is not found and the array is not empty, then this is set to the position of the first element in the array with a key which is greater than the key of the object aRef. If the element is not found and the array is empty, then this is undefined.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="785"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1548"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1578"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Finds the position of an element within the array, based on the matching of keys, using a binary search technique.</p>
				<p>The array is searched, using a binary search technique, for an element whose key matches the key of the supplied &lt;class T&gt; object.</p>
				<p>The array must be in key order.</p>
				<p>Note that where an array has elements with duplicate keys, the function cannot guarantee which element, with the given key value, it will return, except that it will find one of them.</p>
				<p>Zero, if the element with the specified key is found or the array is empty. Non-zero, if the element with the specified key is not found. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a13617c829ab29f8315cc8748687c8c25">
		<apiName>InsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline void InsertL(TInt anIndex, const T &amp;aRef, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::InsertL(TInt,const T &amp;,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anIndex</cxxFunctionParameterDeclarationName>
						<apiDefNote>The position within the array where the element is to be inserted. The position is relative to zero, i.e. zero implies that elements are inserted at the beginning of the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the &lt;class T&gt; object to be inserted into the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the element to be inserted into the array.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="786"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1584"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1608"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts an element of a specified length into the array at the specified position.</p>
				<p>Note that passing a value of anIndex which is the same as the current number of elements in the array, has the effect of appending that element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function always attempts to allocate a cell to contain the new element and may also attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case, the array is left in the state it was in before the call.</p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 21, if anIndex is negative or is greater than the number of objects currently in the array. </p>
				<p>
					<b>panic</b>
				</p>
				<p>E32USER-CBase 30, if aLength is is negative. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1adc7605d6107c4b41dedec177567c472e">
		<apiName>InsertIsqL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt InsertIsqL(const T &amp;aRef, TInt aLength, TKeyArrayVar &amp;aKey)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::InsertIsqL(const T &amp;,TInt,TKeyArrayVar &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the element of type &lt;class T&gt; to be inserted into the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the new element of type &lt;class T&gt; to be inserted into the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_var.xml#class_t_key_array_var">TKeyArrayVar</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="787"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1614"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1641"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts a single element of a specified length into the array at a position determined by a key.</p>
				<p>The array MUST already be in key sequence (as defined by the key), otherwise the position of the new element is unpredictable, or duplicates may occur.</p>
				<p>Elements with duplicate keys are not permitted.</p>
				<p>The position within the array of the newly inserted element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrAlreadyExists An element with the same key already exists within the array. NB the array MUST already be in key sequence, otherwise the function may insert a duplicate and fail to leave with this value. </p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function always attempts to allocate a cell to contain the new element and may also attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case, the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a060ad23b933ce579a0ec219f4c1a6552">
		<apiName>InsertIsqAllowDuplicatesL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt InsertIsqAllowDuplicatesL(const T &amp;aRef, TInt aLength, TKeyArrayVar &amp;aKey)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::InsertIsqAllowDuplicatesL(const T &amp;,TInt,TKeyArrayVar &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const T &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aRef</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to the element of type &lt;class T&gt; to be inserted into the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The length of the new element to be inserted into the array. </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_key_array_var.xml#class_t_key_array_var">TKeyArrayVar</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aKey</cxxFunctionParameterDeclarationName>
						<apiDefNote>A reference to a key object defining the properties of the key.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="788"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1647"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1671"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Inserts a single element of a specified length into the array at a position determined by a key, allowing duplicates.</p>
				<p>The array MUST already be in key sequence, otherwise the position of the new element is unpredictable.</p>
				<p>Elements with duplicate keys are permitted. If the new element&apos;s key is a duplicate of an existing element&apos;s key, then the new element is positioned after the existing element.</p>
				<p>The position within the array of the newly inserted element.</p>
				<p>
					<b>leave</b>
				</p>
				<p>KErrNoMemory The function always attempts to allocate a cell to contain the new element and may also attempt to expand the array buffer. If there is insufficient memory available, the function leaves, in which case, the array is left in the state it was in before the call. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_array_var_1a0b0c4749feb454162b6b2e1cfa57e1ca">
		<apiName>Array</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>const <apiRelation href="class_t_array.xml#class_t_array">TArray</apiRelation>&lt; T &gt;</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CArrayVar</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline const TArray&lt; T &gt; Array() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CArrayVar::Array()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="789"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="1677"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="1683"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Constructs and returns a TArray&lt;T&gt; object.</p>
				<p>A TArray&lt;T&gt; object for this array. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxClassInherits>
		<cxxClassInheritsDetail>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1ae07f7130e2b305a9f09e2d3fca2d9654">CArrayVarBase::AtR(const CBase *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a52fdb1c89be71fcdd9502080967a3961">CArrayVarBase::CArrayVarBase(TBufRep,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a78ba5bfdc44112c44c518da23492bfd4">CArrayVarBase::Compress()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1af56230d7653e6784e23c493495ec0a5f">CArrayVarBase::Count()const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a9a1b913b29cb096c96878849c377be83">CArrayVarBase::CountR(const CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a1fffc2ca617bf985a9eb06a65959eee2">CArrayVarBase::Delete(TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a24c19a87adf8a05840d81829a98b0abb">CArrayVarBase::Delete(TInt,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1aea70ba1b25ee0bc6535c26f1a57bf64f">CArrayVarBase::Find(const TAny *,TKeyArrayVar &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a48205701261c1f396301ace109757480">CArrayVarBase::FindIsq(const TAny *,TKeyArrayVar &amp;,TInt &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a1d09e54c3e421854ccbed09d2a700c33">CArrayVarBase::InsertIsqAllowDuplicatesL(const TAny *,TInt,TKeyArrayVar &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1ae17d605a2a8d9878288bba39a67b4e2f">CArrayVarBase::InsertIsqL(const TAny *,TInt,TKeyArrayVar &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a9f0edefe9154852b1dd8f875084ac2b1">CArrayVarBase::InsertL(TInt,const TAny *,TInt)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a6ac8ff1b1244c8ac931f4075b7b8db31">CArrayVarBase::Length(TInt)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1aa9fecbd5db7a03b57f142d3619691ae1">CArrayVarBase::Reset()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1ab66d6e1ed4e79ade948e1bb0ecb40a6d">CArrayVarBase::SetKey(TKeyArrayVar &amp;)const</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1a72fa537ed6e7985b25218e4c9e3ae1d9">CArrayVarBase::Sort(TKeyArrayVar &amp;)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_array_var_base_1ae0c9f25f79df144b82ec0ac351a610ff">CArrayVarBase::~CArrayVarBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1a240de7932690a4e987d75690b0b6f82b">CBase::CBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1ac0a06aeab68b3e01be81f9dd79e011c6">CBase::Delete(CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1aae681a54d9c9b10c7d42e7e32ff109d5">CBase::Extension_(TUint,TAny *&amp;,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1af4c4965092a763b0856ccbfa3cf99eaf">CBase::operator new(TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1ab9e5f557dea4db22886189926687ddc1">CBase::operator new(TUint,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1aa464dd21494443ac109084ed03b81f28">CBase::operator new(TUint,TLeave)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1af8429815362d4df6fecd47179e0c5dfe">CBase::operator new(TUint,TLeave,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1a80505bdf8b1b20a2ed102307a78eeeeb">CBase::operator new(TUint,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_array_var.xml#class_c_base_1a1390361b94424be22bb2b1020eb400ea">CBase::~CBase()</cxxClassFunctionInherited>
		</cxxClassInheritsDetail>
	</cxxClassInherits>
</cxxClass>