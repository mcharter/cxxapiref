<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxFile PUBLIC "-//NOKIA//DTD DITA C++ API File Reference Type v0.5.0//EN" "dtd/cxxFile.dtd" >
<cxxFile id="e32def_8h">
	<apiName>e32def.h</apiName>
	<cxxTypedef id="e32def_8h_1af7aafba448a6eaa6ce8801f88dcb5b90">
		<apiName>TAny</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>void</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>void TAny</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TAny</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="483"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Pointer to any type.</p>
				<p>TAny* is equivalent to void* in standard C or C++. TAny* is used in preference to void* because it is more suggestive of the actual meaning, e.g. TAny* foo();.</p>
				<p>TAny is not used where it really means &quot;nothing&quot;, as in the declaration of functions which do not return a value; void is used instead, e.g. void Foo();. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a9357a8e9552b6131a89fb3de94bff80a">
		<apiName>TInt8</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>signed char</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>signed char TInt8</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TInt8</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="495"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>8-bit signed integer type, used in Symbian OS to mean an 8-bit signed integer, independent of the implementation. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1aae4399ce3f10d6c2b5ec96a13bbb5881">
		<apiName>TUint8</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>unsigned char</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>unsigned char TUint8</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TUint8</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="507"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>8-bit unsigned integer type; used in Symbian OS to mean an 8-bit unsigned integer, independent of the implementation. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a2ec3eb91f35fbe76b844587a3d73bd94">
		<apiName>TInt16</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>short int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>short int TInt16</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TInt16</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="519"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>16-bit signed integer type, used in Symbian OS to mean a 16-bit signed integer, independent of the implementation. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a7c545c7b28f2e5d128d132d2ea1cdb2b">
		<apiName>TUint16</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>unsigned short int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>unsigned short int TUint16</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TUint16</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="531"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>16-bit unsigned integer type. used in Symbian OS to mean a 16-bit unsigned integer, independent of the implementation. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a08ea5ecd72297daaa3a4f3c41ce9e103">
		<apiName>TInt32</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>long int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>long int TInt32</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TInt32</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="543"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>32-bit signed integer type, used in Symbian OS to mean a 32-bit signed integer, independent of the implementation. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a9768da38f5e945dcd86971e9d9d775a5">
		<apiName>T_IntPtr</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a08ea5ecd72297daaa3a4f3c41ce9e103">TInt32</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TInt32 T_IntPtr</cxxTypedefPrototype>
				<cxxTypedefNameLookup>T_IntPtr</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="554"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>A signed integer type of the same size as a pointer. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1ad1e92268423dfdc589bed92ab9ed2c38">
		<apiName>TIntPtr</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a08ea5ecd72297daaa3a4f3c41ce9e103">TInt32</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TInt32 TIntPtr</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TIntPtr</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="555"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc/>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a8240e11f17c80b6b222fc2af50234da4">
		<apiName>TUint32</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>unsigned long int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>unsigned long int TUint32</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TUint32</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="567"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>32-bit unsigned integer type; used in Symbian OS to mean a 32-bit unsigned integer, independent of the implementation. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1af9b5441029408a44e15dc532528dc9af">
		<apiName>T_UintPtr</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a8240e11f17c80b6b222fc2af50234da4">TUint32</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TUint32 T_UintPtr</cxxTypedefPrototype>
				<cxxTypedefNameLookup>T_UintPtr</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="578"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>An unsigned integer type of the same size as a pointer. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a9686229aad971aeb110afb4809093bcc">
		<apiName>TUintPtr</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a8240e11f17c80b6b222fc2af50234da4">TUint32</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TUint32 TUintPtr</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TUintPtr</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="579"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc/>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1abb88f5378e8305d934297176fe5fa298">
		<apiName>TInt</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>signed int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>signed int TInt</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TInt</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="612"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Signed integer type of the natural machine word length.</p>
				<p>This is as defined by the C++ implementation&apos;s int type. In all implementations, this is guaranteed to be at least 32 bits.</p>
				<p>A TInt should be used in preference to a sized integer (TInt32, TInt16) for all general use. Sized integers should only be used when packing is essential. C++&apos;s type conversion rules imply that all sized integers smaller than the natural machine word are in any case broadened to the natural machine word size when passed as function parameters.</p>
				<p>A TInt should be used in preference to an unsigned integer (TUint) for all general use. Unsigned integers should only be used for flags (which use Boolean operations but not arithmetic) and, in very rare cases, for numbers whose range exceeds that available from signed integers. Although it is natural to attempt to use unsigned integers for quantities which cannot by nature be negative, the C++ language does not provide the support necessary to enforce the &quot;expected&quot; behaviour in these circumstances, and experience has shown that it is better to use signed integers unless there is good reason not to.</p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1acdfcd7c66db8ed1b8dfefd71c9542d42">TUint</xref> </p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1a08ea5ecd72297daaa3a4f3c41ce9e103">TInt32</xref> </p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1a2ec3eb91f35fbe76b844587a3d73bd94">TInt16</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1acdfcd7c66db8ed1b8dfefd71c9542d42">
		<apiName>TUint</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>unsigned int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>unsigned int TUint</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TUint</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="630"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Unsigned integer type of the natural machine word length.</p>
				<p>This is guaranteed to be at least 32 bits in all implementations.</p>
				<p>In almost all circumstances, a TInt should be used in preference to a TUint. The main exception is in flags bytes.</p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1abb88f5378e8305d934297176fe5fa298">TInt</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1af7354620815769d75ede254ea3a508c1">
		<apiName>TReal32</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>float</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>float TReal32</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TReal32</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="649"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>32-bit floating point number, providing IEEE754 single precision on all Symbian OS implementations.</p>
				<p>TReal should normally be used in preference to TReal32.</p>
				<p>Use of floating-point numbers should generally be avoided unless a natural part of the problem specification. Most Symbian OS implementations do not have a hardware floating point unit: as a result, their floating-point performance is hundreds of times slower than integer performance. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1ae83f8db5e4663238872dc26f9e75618c">
		<apiName>TReal64</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>double</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>double TReal64</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TReal64</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="670"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>64-bit floating point number, providing IEEE754 double precision on all Symbian OS implementations.</p>
				<p>Use of floating-point numbers should generally be avoided unless a natural part of the problem specification. Most Symbian OS implementations do not have a hardware floating point unit: as a result, their floating-point performance is hundreds of times slower than integer performance.</p>
				<p>This type is identical to TReal.</p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1a66e591a730f9c72e5990f3541bbb67bd">TReal</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a66e591a730f9c72e5990f3541bbb67bd">
		<apiName>TReal</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>double</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>double TReal</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TReal</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="694"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>64-bit floating point number; identical to TReal64.</p>
				<p>Use of floating-point numbers should generally be avoided unless a natural part of the problem specification. Most Symbian OS implementations do not have a hardware floating point unit: as a result, their floating-point performance is hundreds of times slower than integer performance.</p>
				<p>Most serious floating-point calculations require double-precision. All standard math functions (see Math class) take double-precision arguments. Single-precision should only be used where space and performance are at a premium, and when their limited precision is acceptable.</p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1ae83f8db5e4663238872dc26f9e75618c">TReal64</xref> </p>
				<p>Math </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1abe5c6ac2e07c920fbf09d96856e684e9">
		<apiName>TText8</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>unsigned char</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>unsigned char TText8</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TText8</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="715"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>8-bit unsigned character.</p>
				<p>Use instead of C++ built-in char type because it is guaranteed to be unsigned. Use instead of TInt8 where the application is really for text rather than 8-bit arithmetic or binary quantities.</p>
				<p>For most purposes, you should use TText rather than TText8. TText is mapped onto either TText8 or TText16 depending on whether a non-Unicode or Unicode variant is being built. Use TText8 only when you are dealing explicitly with 8-bit text, regardless of build.</p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1a8094a5c8ef3bcf6221e5ff6405127d34">TText</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a5968f606dc4e223a071335c6622c9399">
		<apiName>TText16</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>unsigned short int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>unsigned short int TText16</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TText16</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="737"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>16-bit unsigned character.</p>
				<p>Use instead of C++ wchar_t type because it is guaranteed to be unsigned. Use instead of TInt16 where the application is really for text rather than 8-bit arithmetic or binary quantities.</p>
				<p>For most purposes, you should use TText rather than TText16. TText is mapped onto either TText8 or TText16 depending on whether a non-Unicode or Unicode variant is being built. Use TText16 only when you are dealing explicitly with 16-bit text, regardless of build.</p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1a8094a5c8ef3bcf6221e5ff6405127d34">TText</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a20c972998428c427c873ed496231115c">
		<apiName>TBool</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>int</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>int TBool</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TBool</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="753"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Boolean type which takes the value either ETrue or EFalse.</p>
				<p>Although only a single bit would theoretically be necessary to represent a Boolean, a machine word is used instead, so that these quantities can be easily passed. Also, TBool must map onto int because of C++&apos;s interpretation of operands in conditional expressions. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1ae44f4629ab3c5854b597e55ffced57ca">
		<apiName>TLinAddr</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1af9b5441029408a44e15dc532528dc9af">T_UintPtr</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>T_UintPtr TLinAddr</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TLinAddr</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="764"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a linear (virtual) address type. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a05bf37b696038fef93385278ebf8ee16">
		<apiName>TInt64</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>Int64</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>Int64 TInt64</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TInt64</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="860"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a 64-bit signed integer type.</p>
				<p>NOTE: For those migrating from versions of Symbian OS before 8.1b (i.e. 8.1a, 7.0s etc) TInt64 is now defined as a built-in type instead of as a class type. This means that the member functions of the old TInt64 class are no longer exported from EUSER.LIB, and represents a compatibility break.</p>
				<p>To ease migration of source code, a number of macros are provided. Similar macros have also been defined in Symbian OS versions 7.0s and 8.1a, but implemented in terms of the old TInt64 class. This is important for code that is common to : one or both of these Symbian OS versions, and to 8.1b and subsequent versions.</p>
				<p>The following list shows the new macros and the functions that they replace. It also shows some alternative techniques. In this list: x, v and r are declared as TInt64, c is declared as TInt, High and Low are declared as TUint.</p>
				<p>
					<codeblock>OLD USAGE						REPLACEMENT

TInt64(High,Low);				MAKE_TINT64(High,Low);
x.Set(High,Low);				MAKE_TINT64(High,Low);
x.Low();						I64LOW(x);
x.High();						I64HIGH(x); 
x.GetTInt();					I64INT(x); 
x.GetTReal();					I64REAL(x); 
x.Lsr(c);						I64LSR(x,c); 
x.Mul10();						x*=10; 
x.MulTop(a);					I64MULTOP(x,a); 
x.DivMod(v,r);					r=x%v; x/=v;</codeblock> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1ab392502765df1d3a9263b05a43f882da">
		<apiName>TUint64</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>Uint64</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>Uint64 TUint64</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TUint64</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="871"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a 64-bit unsigned integer type. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1a8094a5c8ef3bcf6221e5ff6405127d34">
		<apiName>TText</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a5968f606dc4e223a071335c6622c9399">TText16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TText16 TText</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TText</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1103"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Build independent general text character.</p>
				<p>In non-Unicode builds, this is mapped to TText8. In Unicode builds, this is mapped to TText16. Use the classes with explicit width only when you wish the width to be independent of the build variant.</p>
				<p>Use this class rather than <xref href="class_t_char.xml#class_t_char">TChar</xref> for general use. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32def_8h_1acd7bb7f92a57f08c5904a9311a01114d">
		<apiName>VA_LIST</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a9357a8e9552b6131a89fb3de94bff80a">TInt8</apiRelation> *</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TInt8 * VA_LIST[1]</cxxTypedefPrototype>
				<cxxTypedefNameLookup>VA_LIST</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1245"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines a &apos;C&apos; style array of pointers to TInt8 types.</p>
				<p>The type is most commonly used by code that needs to deal with a variable number of arguments passed to a function.</p>
				<p>
					<xref href="e32def_8h.xml#e32def_8h_1a9357a8e9552b6131a89fb3de94bff80a">TInt8</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxVariable id="e32def_8h_1afbc6dbeaec9ce95c862a881b3283b244">
		<apiName>KSuppressPlatSecDiagnosticMagicValue</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableStorageClassSpecifierStatic/>
				<cxxVariableDeclaredType>const char *const</cxxVariableDeclaredType>
				<cxxVariableScopedName/>
				<cxxVariablePrototype>static const char *const KSuppressPlatSecDiagnosticMagicValue</cxxVariablePrototype>
				<cxxVariableNameLookup>KSuppressPlatSecDiagnosticMagicValue</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="2581"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc/>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxVariable id="e32def_8h_1aee8e2c5612439f88c43aa8e81a2aa744">
		<apiName>KSuppressPlatSecDiagnostic</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="public"/>
				<cxxVariableStorageClassSpecifierStatic/>
				<cxxVariableDeclaredType>const char *const</cxxVariableDeclaredType>
				<cxxVariableScopedName/>
				<cxxVariablePrototype>static const char *const KSuppressPlatSecDiagnostic</cxxVariablePrototype>
				<cxxVariableNameLookup>KSuppressPlatSecDiagnostic</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="2646"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc>
				<p>When this value is used in Platform Security APIs as the value for the aDiagnosticText argument, these APIs will not emit any form of diagnostic message.   </p>
			</apiDesc>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxFileAPIItemLocation>
		<cxxFileDeclarationFile name="filePath" value="K:/epoc32/include/e32def.h"/>
	</cxxFileAPIItemLocation>
</cxxFile>