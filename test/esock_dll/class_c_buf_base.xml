<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_c_buf_base">
	<apiName>CBufBase</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassAbstract/>
			<cxxClassDerivations>
				<cxxClassDerivation>
					<cxxClassDerivationAccessSpecifier value="public"/>
					<cxxClassBaseClass href="class_c_base.xml#class_c_base">CBase</cxxClassBaseClass>
				</cxxClassDerivation>
			</cxxClassDerivations>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="98"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="78"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="188"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>Defines the interface for dynamic buffers.</p>
			<p>The basic functions, <xref href="class_c_buf_base.xml#class_c_buf_base_1a67ac66679ceb241ab2b4312e168b6f43">InsertL()</xref>, <xref href="class_c_buf_base.xml#class_c_buf_base_1a6eaa287d4c84a123867bf2a6c6d804da">Read()</xref>, <xref href="class_c_buf_base.xml#class_c_buf_base_1a8a094dc68fc9116d197151853882f748">Write()</xref>, <xref href="class_c_buf_base.xml#class_c_buf_base_1a0eaaef785bd5b3a9f05b4b230bd05095">Delete()</xref>, <xref href="class_c_buf_base.xml#class_c_buf_base_1a5389482efd44788584af610f8e554c4a">Reset()</xref> and <xref href="class_c_buf_base.xml#class_c_buf_base_1a133d9f8f59a9cea13f87602491ed908e">Size()</xref>, transfer data between the buffer and other places, and allow that data to be deleted</p>
			<p>The <xref href="class_c_buf_base.xml#class_c_buf_base_1ab6bb5965f187e55bfffc93433be39e74">ExpandL()</xref> and Resize() functions allow some operations to be carried out with greater efficiency</p>
			<p>A <xref href="class_c_buf_base.xml#class_c_buf_base_1a832403ac7981accc42585eb1eb2c4c75">Compress()</xref> function frees (back to the heap) any space which may have been allocated, but not used</p>
			<p>
				<xref href="class_c_buf_base.xml#class_c_buf_base_1a3eb0850dab2d20ea5a5423ed9ce1d336">Ptr()</xref> and <xref href="class_c_buf_base.xml#class_c_buf_base_1a3d33efc8c71eeaedb19331a704f5aa3a">BackPtr()</xref> allow look-up of contiguous data from any given position, forward or backward </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_c_buf_base_1a336679b0267bb23c129271df617c8f01">
		<apiName>~CBufBase</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDestructor/>
				<cxxFunctionDeclaredType>IMPORT_C</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C ~CBufBase()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::~CBufBase()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="100"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a133d9f8f59a9cea13f87602491ed908e">
		<apiName>Size</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TInt Size() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Size()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="101"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="114"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="124"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets the number of data bytes in the buffer.</p>
				<p>Note that the number of heap bytes used by the buffer may be greater than its size, because there is typically extra room to allow for expansion. Use the <xref href="class_c_buf_base.xml#class_c_buf_base_1a832403ac7981accc42585eb1eb2c4c75">Compress()</xref> function to reduce the extra allocation as much as possible.</p>
				<p>The number of data bytes in the buffer. </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a5389482efd44788584af610f8e554c4a">
		<apiName>Reset</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Reset()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Reset()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="102"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a6eaa287d4c84a123867bf2a6c6d804da">
		<apiName>Read</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Read(TInt aPos, TDes8 &amp;aDes) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Read(TInt,TDes8 &amp;)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_des8.xml#class_t_des8">TDes8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aDes</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="103"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1ae0703ded8193f91e20dd45e3ee9696b3">
		<apiName>Read</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Read(TInt aPos, TDes8 &amp;aDes, TInt aLength) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Read(TInt,TDes8 &amp;,TInt)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="class_t_des8.xml#class_t_des8">TDes8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aDes</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="104"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a468963d99932d1175623b2118bd3e437">
		<apiName>Read</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Read(TInt aPos, TAny *aPtr, TInt aLength) const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Read(TInt,TAny *,TInt)const</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="105"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a8a094dc68fc9116d197151853882f748">
		<apiName>Write</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Write(TInt aPos, const TDesC8 &amp;aDes)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Write(TInt,const TDesC8 &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_des_c8.xml#class_t_des_c8">TDesC8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aDes</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="106"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1ae25afa36fdf0f53e70d801dee0d0442b">
		<apiName>Write</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Write(TInt aPos, const TDesC8 &amp;aDes, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Write(TInt,const TDesC8 &amp;,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_des_c8.xml#class_t_des_c8">TDesC8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aDes</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="107"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a7abee7171a5fa05bd6adec611c8c94ea">
		<apiName>Write</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Write(TInt aPos, const TAny *aPtr, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Write(TInt,const TAny *,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="108"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a67ac66679ceb241ab2b4312e168b6f43">
		<apiName>InsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void InsertL(TInt aPos, const TDesC8 &amp;aDes)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::InsertL(TInt,const TDesC8 &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_des_c8.xml#class_t_des_c8">TDesC8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aDes</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="109"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a96aca8d7c02c8b702146277820a3c5fd">
		<apiName>InsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void InsertL(TInt aPos, const TDesC8 &amp;aDes, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::InsertL(TInt,const TDesC8 &amp;,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_des_c8.xml#class_t_des_c8">TDesC8</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aDes</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="110"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a56e4371e31b31b0b7c0870802500bc86">
		<apiName>InsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void InsertL(TInt aPos, const TAny *aPtr, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::InsertL(TInt,const TAny *,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="111"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1ab6bb5965f187e55bfffc93433be39e74">
		<apiName>ExpandL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void ExpandL(TInt aPos, TInt aLength)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::ExpandL(TInt,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="112"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1ac29e3893f62e6f06b5d4752758502d35">
		<apiName>ResizeL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void ResizeL(TInt aSize)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::ResizeL(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aSize</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="113"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a832403ac7981accc42585eb1eb2c4c75">
		<apiName>Compress</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionPureVirtual/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>virtual void Compress()=0</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Compress()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="129"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Compresses the buffer so as to occupy minimal space.</p>
				<p>Normally, you would call this when a buffer has reached its final size, or when you know it will not expand again for a while, or when an out-of-memory error has occurred and your program is taking measures to save space. Compression in these circumstances releases memory for other programs to use, but has no adverse effect on performance.</p>
				<p>Derived classes provide the implementation.</p>
				<p>
					<xref href="class_c_buf_flat.xml#class_c_buf_flat_1a6043f698363e888f72b90d8510bcf17f">CBufFlat::Compress</xref> </p>
				<p>
					<xref href="class_c_buf_seg.xml#class_c_buf_seg_1a2fccd178de9e13efa884f8c5b096d5ae">CBufSeg::Compress</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a0eaaef785bd5b3a9f05b4b230bd05095">
		<apiName>Delete</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionPureVirtual/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>virtual void Delete(TInt aPos, TInt aLength)=0</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Delete(TInt,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote>Buffer position where the deletion will begin; must be in the range zero to (Size() minus the length of the data to be deleted). </apiDefNote>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote>The number of bytes to be deleted; must be non-negative.</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="143"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Deletes data from the buffer.</p>
				<p>Derived classes provide the implementation.</p>
				<p>
					<xref href="class_c_buf_flat.xml#class_c_buf_flat_1a0e51e72383c64169f369c2be3291276d">CBufFlat::Delete</xref> </p>
				<p>
					<xref href="class_c_buf_seg.xml#class_c_buf_seg_1a6b2a6374edc3f825160e7be58056650c">CBufSeg::Delete</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a3eb0850dab2d20ea5a5423ed9ce1d336">
		<apiName>Ptr</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionPureVirtual/>
				<cxxFunctionDeclaredType>
					<apiRelation href="class_t_ptr8.xml#class_t_ptr8">TPtr8</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>virtual TPtr8 Ptr(TInt aPos)=0</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::Ptr(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote>Buffer position: must be in range zero to Size().</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="159"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer descriptor to represent the data from the specified position to the end of the contiguous region containing that byte.</p>
				<p>Derived classes provide the implementation.</p>
				<p>Descriptor representing the data starting at aPos, and whose length indicates the number of contiguous bytes stored in the buffer, forward from that point. The length will be non-zero unless aPos==Size().</p>
				<p>
					<xref href="class_c_buf_flat.xml#class_c_buf_flat_1a210577dc4b408abd9b41ac5a4826b030">CBufFlat::Ptr</xref> </p>
				<p>
					<xref href="class_c_buf_seg.xml#class_c_buf_seg_1a12400915bfba9cad8489067ce8300a35">CBufSeg::Ptr</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a3d33efc8c71eeaedb19331a704f5aa3a">
		<apiName>BackPtr</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionPureVirtual/>
				<cxxFunctionDeclaredType>
					<apiRelation href="class_t_ptr8.xml#class_t_ptr8">TPtr8</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>virtual TPtr8 BackPtr(TInt aPos)=0</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::BackPtr(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote>Buffer position: must be in range zero to Size().</apiDefNote>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="180"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Gets a pointer descriptor to represent data from just before the specified data byte backward to the beginning of the contiguous region containing that byte.</p>
				<p>Derived classes provide the implementation.</p>
				<p>Descriptor representing the back contiguous region. The address in the descriptor is the pointer to the bytes at the buffer position, unless the buffer position was at the beginning of a non-first segment in the buffer: in this case, the address is a pointer just beyond the last data byte in the previous segment. The length is the number of contiguous bytes from the address backwards to the beginning of the segment.</p>
				<p>
					<xref href="class_c_buf_flat.xml#class_c_buf_flat_1acd8f6aa2d9496d8e8e9f6b4aa83e05b3">CBufFlat::BackPtr</xref> </p>
				<p>
					<xref href="class_c_buf_seg.xml#class_c_buf_seg_1a8aa5cf7e1a75540bc35002429c39744c">CBufSeg::BackPtr</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1ad3178594b234e4f476d327795aeed935">
		<apiName>DoInsertL</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="private"/>
				<cxxFunctionPureVirtual/>
				<cxxFunctionDeclaredType>void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>virtual void DoInsertL(TInt aPos, const TAny *aPtr, TInt aLength)=0</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::DoInsertL(TInt,const TAny *,TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPos</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="e32def_8h.xml#_1af7aafba448a6eaa6ce8801f88dcb5b90">TAny</apiRelation> *</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aPtr</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aLength</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="182"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_buf_base_1a1510a7e4bd17cad1bdb99db34df1b3c6">
		<apiName>CBufBase</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="protected"/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType>IMPORT_C</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CBufBase</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C CBufBase(TInt anExpandSize)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CBufBase::CBufBase(TInt)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>
							<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
						</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>anExpandSize</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="184"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxVariable id="class_c_buf_base_1a604a372ed1f4db319872113b0fde684e">
		<apiName>iSize</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="protected"/>
				<cxxVariableDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName>CBufBase</cxxVariableScopedName>
				<cxxVariablePrototype>TInt iSize</cxxVariablePrototype>
				<cxxVariableNameLookup>CBufBase::iSize</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="186"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc/>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxVariable id="class_c_buf_base_1ac3f6bf23422cc5008497c434ae279ac4">
		<apiName>iExpandSize</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="protected"/>
				<cxxVariableDeclaredType>
					<apiRelation href="e32def_8h.xml#_1abb88f5378e8305d934297176fe5fa298">TInt</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName>CBufBase</cxxVariableScopedName>
				<cxxVariablePrototype>TInt iExpandSize</cxxVariablePrototype>
				<cxxVariableNameLookup>CBufBase::iExpandSize</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="187"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc/>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxClassInherits>
		<cxxClassInheritsDetail>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1a240de7932690a4e987d75690b0b6f82b">CBase::CBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1ac0a06aeab68b3e01be81f9dd79e011c6">CBase::Delete(CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1aae681a54d9c9b10c7d42e7e32ff109d5">CBase::Extension_(TUint,TAny *&amp;,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1af4c4965092a763b0856ccbfa3cf99eaf">CBase::operator new(TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1ab9e5f557dea4db22886189926687ddc1">CBase::operator new(TUint,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1aa464dd21494443ac109084ed03b81f28">CBase::operator new(TUint,TLeave)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1af8429815362d4df6fecd47179e0c5dfe">CBase::operator new(TUint,TLeave,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1a80505bdf8b1b20a2ed102307a78eeeeb">CBase::operator new(TUint,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_buf_base.xml#class_c_base_1a1390361b94424be22bb2b1020eb400ea">CBase::~CBase()</cxxClassFunctionInherited>
		</cxxClassInheritsDetail>
	</cxxClassInherits>
</cxxClass>