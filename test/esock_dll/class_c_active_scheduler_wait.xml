<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxClass PUBLIC "-//NOKIA//DTD DITA C++ API Class Reference Type v0.5.0//EN" "dtd/cxxClass.dtd" >
<cxxClass id="class_c_active_scheduler_wait">
	<apiName>CActiveSchedulerWait</apiName>
	<cxxClassDetail>
		<cxxClassDefinition>
			<cxxClassAccessSpecifier value="public"/>
			<cxxClassDerivations>
				<cxxClassDerivation>
					<cxxClassDerivationAccessSpecifier value="public"/>
					<cxxClassBaseClass href="class_c_base.xml#class_c_base">CBase</cxxClassBaseClass>
				</cxxClassDerivation>
			</cxxClassDerivations>
			<cxxClassAPIItemLocation>
				<cxxClassDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDeclarationFileLine name="lineNumber" value="2873"/>
				<cxxClassDefinitionFile name="filePath" value="K:/epoc32/include/e32base.h"/>
				<cxxClassDefinitionFileLineStart name="lineNumber" value="2858"/>
				<cxxClassDefinitionFileLineEnd name="lineNumber" value="2884"/>
			</cxxClassAPIItemLocation>
		</cxxClassDefinition>
		<apiDesc>
			<p>Controls a single scheduling loop in the current active scheduler.</p>
			<p>This class provides better control of nested wait loops in the active scheduler.</p>
			<p>Note that a <xref href="class_c_active_scheduler_wait.xml#class_c_active_scheduler_wait">CActiveSchedulerWait</xref> object can be used as a data member inside other <xref href="class_c_base.xml#class_c_base">CBase</xref> derived classes.</p>
			<p>
				<xref href="class_c_active_scheduler.xml#class_c_active_scheduler">CActiveScheduler</xref> </p>
		</apiDesc>
	</cxxClassDetail>
	<cxxFunction id="class_c_active_scheduler_wait_1a191645c3e7b6f4ccfa628293d88bcc89">
		<apiName>CActiveSchedulerWait</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConstructor/>
				<cxxFunctionDeclaredType>IMPORT_C</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CActiveSchedulerWait</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C CActiveSchedulerWait()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CActiveSchedulerWait::CActiveSchedulerWait()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2875"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_active_scheduler_wait_1a4c53d4c735e9d1322fa32155c7e367e4">
		<apiName>~CActiveSchedulerWait</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDestructor/>
				<cxxFunctionDeclaredType>IMPORT_C</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CActiveSchedulerWait</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C ~CActiveSchedulerWait()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CActiveSchedulerWait::~CActiveSchedulerWait()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2876"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_active_scheduler_wait_1a43bc83e37b2a56ba7c669d37924a0bc6">
		<apiName>Start</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CActiveSchedulerWait</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void Start()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CActiveSchedulerWait::Start()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2877"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_active_scheduler_wait_1a8c9664cb27011d688c734e01c1c37677">
		<apiName>AsyncStop</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CActiveSchedulerWait</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void AsyncStop()</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CActiveSchedulerWait::AsyncStop()</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2878"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_active_scheduler_wait_1a46de3ecabbdad2bf78095dd55cdeb49a">
		<apiName>AsyncStop</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionDeclaredType>IMPORT_C void</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CActiveSchedulerWait</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C void AsyncStop(const TCallBack &amp;aCallMeWhenStopped)</cxxFunctionPrototype>
				<cxxFunctionNameLookup>CActiveSchedulerWait::AsyncStop(const TCallBack &amp;)</cxxFunctionNameLookup>
				<cxxFunctionParameters>
					<cxxFunctionParameter>
						<cxxFunctionParameterDeclaredType>const <apiRelation href="class_t_call_back.xml#class_t_call_back">TCallBack</apiRelation> &amp;</cxxFunctionParameterDeclaredType>
						<cxxFunctionParameterDeclarationName>aCallMeWhenStopped</cxxFunctionParameterDeclarationName>
						<apiDefNote/>
					</cxxFunctionParameter>
				</cxxFunctionParameters>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2879"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_active_scheduler_wait_1a742d3cb9a8f4dc1b4f703eaeeb048630">
		<apiName>IsStarted</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionInline/>
				<cxxFunctionDeclaredType>
					<apiRelation href="e32def_8h.xml#_1a20c972998428c427c873ed496231115c">TBool</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CActiveSchedulerWait</cxxFunctionScopedName>
				<cxxFunctionPrototype>inline TBool IsStarted() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CActiveSchedulerWait::IsStarted()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2880"/>
					<cxxFunctionDefinitionFile name="filePath" value="K:/sf/os/commsfw/datacommsserver/esockserver/csock/CS_CLI.CPP"/>
					<cxxFunctionDefinitionFileLineStart name="lineNumber" value="2743"/>
					<cxxFunctionDefinitionFileLineEnd name="lineNumber" value="2756"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc>
				<p>Reports whether this <xref href="class_c_active_scheduler_wait.xml#class_c_active_scheduler_wait">CActiveSchedulerWait</xref> object is currently started.</p>
				<p>Note: a <xref href="class_c_active_scheduler_wait.xml#class_c_active_scheduler_wait">CActiveSchedulerWait</xref> object itself becomes &quot;stopped&quot; as soon as <xref href="class_c_active_scheduler_wait.xml#class_c_active_scheduler_wait_1a8c9664cb27011d688c734e01c1c37677">AsyncStop()</xref> is called, and can be started again immediately if required (but this would start a new nested level of the scheduler).</p>
				<p>True if the scheduling loop is active; false, otherwise.</p>
				<p>
					<xref href="class_c_active_scheduler_wait.xml#class_c_active_scheduler_wait_1a43bc83e37b2a56ba7c669d37924a0bc6">CActiveSchedulerWait::Start</xref> </p>
				<p>
					<xref href="class_c_active_scheduler_wait.xml#class_c_active_scheduler_wait_1a8c9664cb27011d688c734e01c1c37677">CActiveSchedulerWait::AsyncStop</xref> </p>
			</apiDesc>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxFunction id="class_c_active_scheduler_wait_1a53e1e1fa59de28546a8a14b370ba4168">
		<apiName>CanStopNow</apiName>
		<cxxFunctionDetail>
			<cxxFunctionDefinition>
				<cxxFunctionAccessSpecifier value="public"/>
				<cxxFunctionConst/>
				<cxxFunctionDeclaredType>IMPORT_C <apiRelation href="e32def_8h.xml#_1a20c972998428c427c873ed496231115c">TBool</apiRelation>
				</cxxFunctionDeclaredType>
				<cxxFunctionScopedName>CActiveSchedulerWait</cxxFunctionScopedName>
				<cxxFunctionPrototype>IMPORT_C TBool CanStopNow() const </cxxFunctionPrototype>
				<cxxFunctionNameLookup>CActiveSchedulerWait::CanStopNow()const</cxxFunctionNameLookup>
				<cxxFunctionParameters/>
				<cxxFunctionAPIItemLocation>
					<cxxFunctionDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxFunctionDeclarationFileLine name="lineNumber" value="2881"/>
				</cxxFunctionAPIItemLocation>
			</cxxFunctionDefinition>
			<apiDesc/>
		</cxxFunctionDetail>
	</cxxFunction>
	<cxxVariable id="class_c_active_scheduler_wait_1a2d0d493e0216ea0cfb782a7497e919ee">
		<apiName>iLoop</apiName>
		<cxxVariableDetail>
			<cxxVariableDefinition>
				<cxxVariableAccessSpecifier value="private"/>
				<cxxVariableDeclaredType>
					<apiRelation href="class_c_active_scheduler.xml#_1ae8f60665c0785385bcd5e76ad744678a">CActiveScheduler::TLoopOwner</apiRelation>
				</cxxVariableDeclaredType>
				<cxxVariableScopedName>CActiveSchedulerWait</cxxVariableScopedName>
				<cxxVariablePrototype>CActiveScheduler::TLoopOwner iLoop</cxxVariablePrototype>
				<cxxVariableNameLookup>CActiveSchedulerWait::iLoop</cxxVariableNameLookup>
				<cxxVariableAPIItemLocation>
					<cxxVariableDeclarationFile name="filePath" value="K:/epoc32/include/e32base.h"/>
					<cxxVariableDeclarationFileLine name="lineNumber" value="2883"/>
				</cxxVariableAPIItemLocation>
			</cxxVariableDefinition>
			<apiDesc/>
		</cxxVariableDetail>
	</cxxVariable>
	<cxxClassInherits>
		<cxxClassInheritsDetail>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1a240de7932690a4e987d75690b0b6f82b">CBase::CBase()</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1ac0a06aeab68b3e01be81f9dd79e011c6">CBase::Delete(CBase *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1aae681a54d9c9b10c7d42e7e32ff109d5">CBase::Extension_(TUint,TAny *&amp;,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1af4c4965092a763b0856ccbfa3cf99eaf">CBase::operator new(TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1ab9e5f557dea4db22886189926687ddc1">CBase::operator new(TUint,TAny *)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1aa464dd21494443ac109084ed03b81f28">CBase::operator new(TUint,TLeave)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1af8429815362d4df6fecd47179e0c5dfe">CBase::operator new(TUint,TLeave,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1a80505bdf8b1b20a2ed102307a78eeeeb">CBase::operator new(TUint,TUint)</cxxClassFunctionInherited>
			<cxxClassFunctionInherited href="class_c_active_scheduler_wait.xml#class_c_base_1a1390361b94424be22bb2b1020eb400ea">CBase::~CBase()</cxxClassFunctionInherited>
		</cxxClassInheritsDetail>
	</cxxClassInherits>
</cxxClass>