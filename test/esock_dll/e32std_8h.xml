<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE cxxFile PUBLIC "-//NOKIA//DTD DITA C++ API File Reference Type v0.5.0//EN" "dtd/cxxFile.dtd" >
<cxxFile id="e32std_8h">
	<apiName>e32std.h</apiName>
	<cxxTypedef id="e32std_8h_1ab7ed783298450ccfb63e7a39cc458753">
		<apiName>TLex</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_lex16.xml#class_t_lex16">TLex16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TLex16 TLex</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TLex</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32std.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1367"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Provides access to general string-parsing functions suitable for numeric format conversions and syntactical-element parsing.</p>
				<p>It maps directly to either a <xref href="class_t_lex16.xml#class_t_lex16">TLex16</xref> for a Unicode build or a <xref href="class_t_lex8.xml#class_t_lex8">TLex8</xref> for a non-Unicode build.</p>
				<p>The build independent type should always be used unless an explicit 16 bit or 8 bit build variant is required.</p>
				<p>
					<xref href="class_t_lex16.xml#class_t_lex16">TLex16</xref> </p>
				<p>
					<xref href="class_t_lex8.xml#class_t_lex8">TLex8</xref> </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32std_8h_1aa5992cfe3d5b53f9d8fdb5cf239de19c">
		<apiName>TLexMark</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>
					<apiRelation href="class_t_lex_mark16.xml#class_t_lex_mark16">TLexMark16</apiRelation>
				</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>TLexMark16 TLexMark</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TLexMark</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32std.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="1385"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc>
				<p>Defines the extraction mark used by the TLex classes to indicate the current lexical element being analysed.</p>
				<p>It maps directly to either a <xref href="class_t_lex_mark16.xml#class_t_lex_mark16">TLexMark16</xref> for a Unicode build or a <xref href="class_t_lex_mark8.xml#class_t_lex_mark8">TLexMark8</xref> for a non-Unicode build.</p>
				<p>The build independent type should always be used unless an explicit 16 bit or 8 bit build variant is required. </p>
			</apiDesc>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxTypedef id="e32std_8h_1a36f74c757a51206463ed4fbbe3851fa8">
		<apiName>TTlsCleanupHandler</apiName>
		<cxxTypedefDetail>
			<cxxTypedefDefinition>
				<cxxTypedefAccessSpecifier value="public"/>
				<cxxTypedefDeclaredType>void(*</cxxTypedefDeclaredType>
				<cxxTypedefScopedName/>
				<cxxTypedefPrototype>void(* TTlsCleanupHandler)(TAny *)</cxxTypedefPrototype>
				<cxxTypedefNameLookup>TTlsCleanupHandler</cxxTypedefNameLookup>
				<cxxTypedefAPIItemLocation>
					<cxxTypedefDeclarationFile name="filePath" value="K:/epoc32/include/e32std.h"/>
					<cxxTypedefDeclarationFileLine name="lineNumber" value="5078"/>
				</cxxTypedefAPIItemLocation>
			</cxxTypedefDefinition>
			<apiDesc/>
		</cxxTypedefDetail>
	</cxxTypedef>
	<cxxFileAPIItemLocation>
		<cxxFileDeclarationFile name="filePath" value="K:/epoc32/include/e32std.h"/>
	</cxxFileAPIItemLocation>
</cxxFile>